
Pulse_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006510  08006510  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006518  08006518  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006518  08006518  00007518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006520  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000010  08006530  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006530  000082a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124e9  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002374  00000000  00000000  0001a529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c95  00000000  00000000  0001d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026301  00000000  00000000  0001e53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131b7  00000000  00000000  0004483e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb628  00000000  00000000  000579f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015301d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  001530a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001576dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064b8 	.word	0x080064b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080064b8 	.word	0x080064b8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <PWM_init+0x40>)
 8000ea6:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000eba:	68b8      	ldr	r0, [r7, #8]
 8000ebc:	f002 fe3c 	bl	8003b38 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f002 ff09 	bl	8003cdc <HAL_TIM_PWM_Start>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	0a21fe80 	.word	0x0a21fe80

08000ed8 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ee4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	d137      	bne.n	8000f66 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	889b      	ldrh	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <PWM_write_duty+0x32>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000f08:	e0e1      	b.n	80010ce <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	889b      	ldrh	r3, [r3, #4]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d105      	bne.n	8000f1e <PWM_write_duty+0x46>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f1c:	e0d7      	b.n	80010ce <PWM_write_duty+0x1f6>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d105      	bne.n	8000f32 <PWM_write_duty+0x5a>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f30:	e0cd      	b.n	80010ce <PWM_write_duty+0x1f6>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	d105      	bne.n	8000f46 <PWM_write_duty+0x6e>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f44:	e0c3      	b.n	80010ce <PWM_write_duty+0x1f6>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	889b      	ldrh	r3, [r3, #4]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d105      	bne.n	8000f5a <PWM_write_duty+0x82>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f58:	e0b9      	b.n	80010ce <PWM_write_duty+0x1f6>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000f64:	e0b3      	b.n	80010ce <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7e:	ee17 2a90 	vmov	r2, s15
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f8e:	33fe      	adds	r3, #254	@ 0xfe
 8000f90:	4a51      	ldr	r2, [pc, #324]	@ (80010d8 <PWM_write_duty+0x200>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0bdb      	lsrs	r3, r3, #15
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	899b      	ldrh	r3, [r3, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	89db      	ldrh	r3, [r3, #14]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa6a 	bl	80004bc <__aeabi_i2d>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	eef0 7ae7 	vabs.f32	s15, s15
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff fa72 	bl	80004e0 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff fac4 	bl	8000590 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <PWM_write_duty+0x204>)
 8001016:	f7ff fbe5 	bl	80007e4 <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd4f 	bl	8000ac4 <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	899a      	ldrh	r2, [r3, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	89da      	ldrh	r2, [r3, #14]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	89da      	ldrh	r2, [r3, #14]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <PWM_write_duty+0x190>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	6952      	ldr	r2, [r2, #20]
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001066:	e032      	b.n	80010ce <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d106      	bne.n	800107e <PWM_write_duty+0x1a6>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800107c:	e027      	b.n	80010ce <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d106      	bne.n	8001094 <PWM_write_duty+0x1bc>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001092:	e01c      	b.n	80010ce <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	889b      	ldrh	r3, [r3, #4]
 8001098:	2b0c      	cmp	r3, #12
 800109a:	d106      	bne.n	80010aa <PWM_write_duty+0x1d2>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010a8:	e011      	b.n	80010ce <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d106      	bne.n	80010c0 <PWM_write_duty+0x1e8>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80010be:	e006      	b.n	80010ce <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80010cc:	e7ff      	b.n	80010ce <PWM_write_duty+0x1f6>
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bdb0      	pop	{r4, r5, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	80008001 	.word	0x80008001
 80010dc:	40590000 	.word	0x40590000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f001 f961 	bl	80023aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f862 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 fc46 	bl	800197c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010f0:	f000 f8aa 	bl	8001248 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80010f4:	f000 f8f2 	bl	80012dc <MX_TIM1_Init>
  MX_TIM3_Init();
 80010f8:	f000 f994 	bl	8001424 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010fc:	f000 fa30 	bl	8001560 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001100:	f000 facc 	bl	800169c <MX_TIM8_Init>
  MX_TIM20_Init();
 8001104:	f000 fb8a 	bl	800181c <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&StepperL, &htim8, TIM_CHANNEL_1);
 8001108:	2200      	movs	r2, #0
 800110a:	4921      	ldr	r1, [pc, #132]	@ (8001190 <main+0xb0>)
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <main+0xb4>)
 800110e:	f7ff fec1 	bl	8000e94 <PWM_init>
  PWM_init(&StepperR, &htim8, TIM_CHANNEL_2);
 8001112:	2204      	movs	r2, #4
 8001114:	491e      	ldr	r1, [pc, #120]	@ (8001190 <main+0xb0>)
 8001116:	4820      	ldr	r0, [pc, #128]	@ (8001198 <main+0xb8>)
 8001118:	f7ff febc 	bl	8000e94 <PWM_init>
  PWM_init(&BrushMTR, &htim20, TIM_CHANNEL_1);
 800111c:	2200      	movs	r2, #0
 800111e:	491f      	ldr	r1, [pc, #124]	@ (800119c <main+0xbc>)
 8001120:	481f      	ldr	r0, [pc, #124]	@ (80011a0 <main+0xc0>)
 8001122:	f7ff feb7 	bl	8000e94 <PWM_init>

  HAL_TIM_Base_Start(&htim1); //FB CH2
 8001126:	481f      	ldr	r0, [pc, #124]	@ (80011a4 <main+0xc4>)
 8001128:	f002 fd06 	bl	8003b38 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //LR CH4
 800112c:	481e      	ldr	r0, [pc, #120]	@ (80011a8 <main+0xc8>)
 800112e:	f002 fd03 	bl	8003b38 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4); //BR CH6
 8001132:	481e      	ldr	r0, [pc, #120]	@ (80011ac <main+0xcc>)
 8001134:	f002 fd00 	bl	8003b38 <HAL_TIM_Base_Start>

  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8001138:	2100      	movs	r1, #0
 800113a:	481a      	ldr	r0, [pc, #104]	@ (80011a4 <main+0xc4>)
 800113c:	f002 ff42 	bl	8003fc4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001140:	2104      	movs	r1, #4
 8001142:	4818      	ldr	r0, [pc, #96]	@ (80011a4 <main+0xc4>)
 8001144:	f002 ff3e 	bl	8003fc4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8001148:	2100      	movs	r1, #0
 800114a:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <main+0xc8>)
 800114c:	f002 ff3a 	bl	8003fc4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8001150:	2104      	movs	r1, #4
 8001152:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <main+0xc8>)
 8001154:	f002 ff36 	bl	8003fc4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 8001158:	2100      	movs	r1, #0
 800115a:	4814      	ldr	r0, [pc, #80]	@ (80011ac <main+0xcc>)
 800115c:	f002 ff32 	bl	8003fc4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8001160:	2104      	movs	r1, #4
 8001162:	4812      	ldr	r0, [pc, #72]	@ (80011ac <main+0xcc>)
 8001164:	f002 ff2e 	bl	8003fc4 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001168:	2100      	movs	r1, #0
 800116a:	4809      	ldr	r0, [pc, #36]	@ (8001190 <main+0xb0>)
 800116c:	f002 fdb6 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001170:	2104      	movs	r1, #4
 8001172:	4807      	ldr	r0, [pc, #28]	@ (8001190 <main+0xb0>)
 8001174:	f002 fdb2 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 8001178:	2100      	movs	r1, #0
 800117a:	4808      	ldr	r0, [pc, #32]	@ (800119c <main+0xbc>)
 800117c:	f002 fdae 	bl	8003cdc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ReadController();
 8001180:	f000 fe56 	bl	8001e30 <ReadController>
	  StpperMotorControlled();
 8001184:	f000 fc82 	bl	8001a8c <StpperMotorControlled>
	  BrusheMotorControlled();
 8001188:	f000 fe28 	bl	8001ddc <BrusheMotorControlled>
	  ReadController();
 800118c:	bf00      	nop
 800118e:	e7f7      	b.n	8001180 <main+0xa0>
 8001190:	200001a4 	.word	0x200001a4
 8001194:	20000254 	.word	0x20000254
 8001198:	2000026c 	.word	0x2000026c
 800119c:	200001f0 	.word	0x200001f0
 80011a0:	20000284 	.word	0x20000284
 80011a4:	200000c0 	.word	0x200000c0
 80011a8:	2000010c 	.word	0x2000010c
 80011ac:	20000158 	.word	0x20000158

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	@ 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	2238      	movs	r2, #56	@ 0x38
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 f94e 	bl	8006460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f001 fc28 	bl	8002a28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2340      	movs	r3, #64	@ 0x40
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011f2:	2355      	movs	r3, #85	@ 0x55
 80011f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fcc2 	bl	8002b90 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001212:	f000 fe8b 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2303      	movs	r3, #3
 800121c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2104      	movs	r1, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f001 ffc0 	bl	80031b4 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800123a:	f000 fe77 	bl	8001f2c <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	@ 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800124e:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <MX_LPUART1_UART_Init+0x90>)
 8001250:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800128c:	f004 fa7a 	bl	8005784 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 fe49 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 800129e:	f005 f815 	bl	80062cc <HAL_UARTEx_SetTxFifoThreshold>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012a8:	f000 fe40 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 80012b0:	f005 f84a 	bl	8006348 <HAL_UARTEx_SetRxFifoThreshold>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012ba:	f000 fe37 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	f004 ffcb 	bl	800625a <HAL_UARTEx_DisableFifoMode>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012ca:	f000 fe2f 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000002c 	.word	0x2000002c
 80012d8:	40008000 	.word	0x40008000

080012dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b090      	sub	sp, #64	@ 0x40
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001318:	4b40      	ldr	r3, [pc, #256]	@ (800141c <MX_TIM1_Init+0x140>)
 800131a:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <MX_TIM1_Init+0x144>)
 800131c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800131e:	4b3f      	ldr	r3, [pc, #252]	@ (800141c <MX_TIM1_Init+0x140>)
 8001320:	22a9      	movs	r2, #169	@ 0xa9
 8001322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <MX_TIM1_Init+0x140>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800132a:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <MX_TIM1_Init+0x140>)
 800132c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <MX_TIM1_Init+0x140>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001338:	4b38      	ldr	r3, [pc, #224]	@ (800141c <MX_TIM1_Init+0x140>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b37      	ldr	r3, [pc, #220]	@ (800141c <MX_TIM1_Init+0x140>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001344:	4835      	ldr	r0, [pc, #212]	@ (800141c <MX_TIM1_Init+0x140>)
 8001346:	f002 fb9f 	bl	8003a88 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001350:	f000 fdec 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800135e:	4619      	mov	r1, r3
 8001360:	482e      	ldr	r0, [pc, #184]	@ (800141c <MX_TIM1_Init+0x140>)
 8001362:	f003 f8e3 	bl	800452c <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800136c:	f000 fdde 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001370:	482a      	ldr	r0, [pc, #168]	@ (800141c <MX_TIM1_Init+0x140>)
 8001372:	f002 fdc5 	bl	8003f00 <HAL_TIM_IC_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800137c:	f000 fdd6 	bl	8001f2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001380:	2304      	movs	r3, #4
 8001382:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001384:	2350      	movs	r3, #80	@ 0x50
 8001386:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4820      	ldr	r0, [pc, #128]	@ (800141c <MX_TIM1_Init+0x140>)
 800139c:	f003 f9dc 	bl	8004758 <HAL_TIM_SlaveConfigSynchro>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80013a6:	f000 fdc1 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ae:	2301      	movs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <MX_TIM1_Init+0x140>)
 80013c4:	f002 ff02 	bl	80041cc <HAL_TIM_IC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013ce:	f000 fdad 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013d2:	2302      	movs	r3, #2
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013d6:	2302      	movs	r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	480e      	ldr	r0, [pc, #56]	@ (800141c <MX_TIM1_Init+0x140>)
 80013e4:	f002 fef2 	bl	80041cc <HAL_TIM_IC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80013ee:	f000 fd9d 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_TIM1_Init+0x140>)
 8001404:	f004 f894 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800140e:	f000 fd8d 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3740      	adds	r7, #64	@ 0x40
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000c0 	.word	0x200000c0
 8001420:	40012c00 	.word	0x40012c00

08001424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b090      	sub	sp, #64	@ 0x40
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001462:	4a3e      	ldr	r2, [pc, #248]	@ (800155c <MX_TIM3_Init+0x138>)
 8001464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001466:	4b3c      	ldr	r3, [pc, #240]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001468:	22a9      	movs	r2, #169	@ 0xa9
 800146a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <MX_TIM3_Init+0x134>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001472:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001478:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <MX_TIM3_Init+0x134>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001486:	4834      	ldr	r0, [pc, #208]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001488:	f002 fafe 	bl	8003a88 <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001492:	f000 fd4b 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014a0:	4619      	mov	r1, r3
 80014a2:	482d      	ldr	r0, [pc, #180]	@ (8001558 <MX_TIM3_Init+0x134>)
 80014a4:	f003 f842 	bl	800452c <HAL_TIM_ConfigClockSource>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80014ae:	f000 fd3d 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014b2:	4829      	ldr	r0, [pc, #164]	@ (8001558 <MX_TIM3_Init+0x134>)
 80014b4:	f002 fd24 	bl	8003f00 <HAL_TIM_IC_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014be:	f000 fd35 	bl	8001f2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80014c2:	2304      	movs	r3, #4
 80014c4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80014c6:	2350      	movs	r3, #80	@ 0x50
 80014c8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	481e      	ldr	r0, [pc, #120]	@ (8001558 <MX_TIM3_Init+0x134>)
 80014de:	f003 f93b 	bl	8004758 <HAL_TIM_SlaveConfigSynchro>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80014e8:	f000 fd20 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4814      	ldr	r0, [pc, #80]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001506:	f002 fe61 	bl	80041cc <HAL_TIM_IC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001510:	f000 fd0c 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001514:	2302      	movs	r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001518:	2302      	movs	r3, #2
 800151a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2204      	movs	r2, #4
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001526:	f002 fe51 	bl	80041cc <HAL_TIM_IC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001530:	f000 fcfc 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_TIM3_Init+0x134>)
 8001542:	f003 fff5 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 800154c:	f000 fcee 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3740      	adds	r7, #64	@ 0x40
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000010c 	.word	0x2000010c
 800155c:	40000400 	.word	0x40000400

08001560 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b090      	sub	sp, #64	@ 0x40
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800159c:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <MX_TIM4_Init+0x134>)
 800159e:	4a3e      	ldr	r2, [pc, #248]	@ (8001698 <MX_TIM4_Init+0x138>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80015a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015a4:	22a9      	movs	r2, #169	@ 0xa9
 80015a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015ae:	4b39      	ldr	r3, [pc, #228]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015c2:	4834      	ldr	r0, [pc, #208]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015c4:	f002 fa60 	bl	8003a88 <HAL_TIM_Base_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80015ce:	f000 fcad 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015dc:	4619      	mov	r1, r3
 80015de:	482d      	ldr	r0, [pc, #180]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015e0:	f002 ffa4 	bl	800452c <HAL_TIM_ConfigClockSource>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80015ea:	f000 fc9f 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015ee:	4829      	ldr	r0, [pc, #164]	@ (8001694 <MX_TIM4_Init+0x134>)
 80015f0:	f002 fc86 	bl	8003f00 <HAL_TIM_IC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80015fa:	f000 fc97 	bl	8001f2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80015fe:	2304      	movs	r3, #4
 8001600:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001602:	2350      	movs	r3, #80	@ 0x50
 8001604:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	481e      	ldr	r0, [pc, #120]	@ (8001694 <MX_TIM4_Init+0x134>)
 800161a:	f003 f89d 	bl	8004758 <HAL_TIM_SlaveConfigSynchro>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001624:	f000 fc82 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	4619      	mov	r1, r3
 8001640:	4814      	ldr	r0, [pc, #80]	@ (8001694 <MX_TIM4_Init+0x134>)
 8001642:	f002 fdc3 	bl	80041cc <HAL_TIM_IC_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800164c:	f000 fc6e 	bl	8001f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001650:	2302      	movs	r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2204      	movs	r2, #4
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <MX_TIM4_Init+0x134>)
 8001662:	f002 fdb3 	bl	80041cc <HAL_TIM_IC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 800166c:	f000 fc5e 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_TIM4_Init+0x134>)
 800167e:	f003 ff57 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 8001688:	f000 fc50 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3740      	adds	r7, #64	@ 0x40
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000158 	.word	0x20000158
 8001698:	40000800 	.word	0x40000800

0800169c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b09c      	sub	sp, #112	@ 0x70
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2234      	movs	r2, #52	@ 0x34
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fec2 	bl	8006460 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001814 <MX_TIM8_Init+0x178>)
 80016de:	4a4e      	ldr	r2, [pc, #312]	@ (8001818 <MX_TIM8_Init+0x17c>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80016e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001814 <MX_TIM8_Init+0x178>)
 80016e4:	22a9      	movs	r2, #169	@ 0xa9
 80016e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <MX_TIM8_Init+0x178>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80016ee:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <MX_TIM8_Init+0x178>)
 80016f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <MX_TIM8_Init+0x178>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016fc:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <MX_TIM8_Init+0x178>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <MX_TIM8_Init+0x178>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001708:	4842      	ldr	r0, [pc, #264]	@ (8001814 <MX_TIM8_Init+0x178>)
 800170a:	f002 f9bd 	bl	8003a88 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001714:	f000 fc0a 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800171e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001722:	4619      	mov	r1, r3
 8001724:	483b      	ldr	r0, [pc, #236]	@ (8001814 <MX_TIM8_Init+0x178>)
 8001726:	f002 ff01 	bl	800452c <HAL_TIM_ConfigClockSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001730:	f000 fbfc 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001734:	4837      	ldr	r0, [pc, #220]	@ (8001814 <MX_TIM8_Init+0x178>)
 8001736:	f002 fa6f 	bl	8003c18 <HAL_TIM_PWM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001740:	f000 fbf4 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001750:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001754:	4619      	mov	r1, r3
 8001756:	482f      	ldr	r0, [pc, #188]	@ (8001814 <MX_TIM8_Init+0x178>)
 8001758:	f003 feea 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001762:	f000 fbe3 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	@ 0x60
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 500;
 800176a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001784:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001788:	2200      	movs	r2, #0
 800178a:	4619      	mov	r1, r3
 800178c:	4821      	ldr	r0, [pc, #132]	@ (8001814 <MX_TIM8_Init+0x178>)
 800178e:	f002 fdb9 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001798:	f000 fbc8 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a4:	2204      	movs	r2, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	481a      	ldr	r0, [pc, #104]	@ (8001814 <MX_TIM8_Init+0x178>)
 80017aa:	f002 fdab 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM8_Init+0x11c>
  {
    Error_Handler();
 80017b4:	f000 fbba 	bl	8001f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	@ (8001814 <MX_TIM8_Init+0x178>)
 80017f6:	f003 ff31 	bl	800565c <HAL_TIMEx_ConfigBreakDeadTime>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM8_Init+0x168>
  {
    Error_Handler();
 8001800:	f000 fb94 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001804:	4803      	ldr	r0, [pc, #12]	@ (8001814 <MX_TIM8_Init+0x178>)
 8001806:	f000 fce1 	bl	80021cc <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3770      	adds	r7, #112	@ 0x70
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001a4 	.word	0x200001a4
 8001818:	40013400 	.word	0x40013400

0800181c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b09c      	sub	sp, #112	@ 0x70
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2234      	movs	r2, #52	@ 0x34
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f004 fe02 	bl	8006460 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800185c:	4b45      	ldr	r3, [pc, #276]	@ (8001974 <MX_TIM20_Init+0x158>)
 800185e:	4a46      	ldr	r2, [pc, #280]	@ (8001978 <MX_TIM20_Init+0x15c>)
 8001860:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 169;
 8001862:	4b44      	ldr	r3, [pc, #272]	@ (8001974 <MX_TIM20_Init+0x158>)
 8001864:	22a9      	movs	r2, #169	@ 0xa9
 8001866:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b42      	ldr	r3, [pc, #264]	@ (8001974 <MX_TIM20_Init+0x158>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 999;
 800186e:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <MX_TIM20_Init+0x158>)
 8001870:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001874:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b3f      	ldr	r3, [pc, #252]	@ (8001974 <MX_TIM20_Init+0x158>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800187c:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <MX_TIM20_Init+0x158>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b3c      	ldr	r3, [pc, #240]	@ (8001974 <MX_TIM20_Init+0x158>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001888:	483a      	ldr	r0, [pc, #232]	@ (8001974 <MX_TIM20_Init+0x158>)
 800188a:	f002 f8fd 	bl	8003a88 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001894:	f000 fb4a 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018a2:	4619      	mov	r1, r3
 80018a4:	4833      	ldr	r0, [pc, #204]	@ (8001974 <MX_TIM20_Init+0x158>)
 80018a6:	f002 fe41 	bl	800452c <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80018b0:	f000 fb3c 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80018b4:	482f      	ldr	r0, [pc, #188]	@ (8001974 <MX_TIM20_Init+0x158>)
 80018b6:	f002 f9af 	bl	8003c18 <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80018c0:	f000 fb34 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80018d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018d4:	4619      	mov	r1, r3
 80018d6:	4827      	ldr	r0, [pc, #156]	@ (8001974 <MX_TIM20_Init+0x158>)
 80018d8:	f003 fe2a 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 80018e2:	f000 fb23 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	@ 0x60
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f2:	2300      	movs	r3, #0
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001906:	2200      	movs	r2, #0
 8001908:	4619      	mov	r1, r3
 800190a:	481a      	ldr	r0, [pc, #104]	@ (8001974 <MX_TIM20_Init+0x158>)
 800190c:	f002 fcfa 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001916:	f000 fb09 	bl	8001f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	@ (8001974 <MX_TIM20_Init+0x158>)
 8001958:	f003 fe80 	bl	800565c <HAL_TIMEx_ConfigBreakDeadTime>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM20_Init+0x14a>
  {
    Error_Handler();
 8001962:	f000 fae3 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <MX_TIM20_Init+0x158>)
 8001968:	f000 fc30 	bl	80021cc <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3770      	adds	r7, #112	@ 0x70
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200001f0 	.word	0x200001f0
 8001978:	40015000 	.word	0x40015000

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <MX_GPIO_Init+0x104>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a3a      	ldr	r2, [pc, #232]	@ (8001a80 <MX_GPIO_Init+0x104>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019aa:	4b35      	ldr	r3, [pc, #212]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	4a34      	ldr	r2, [pc, #208]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019b0:	f043 0320 	orr.w	r3, r3, #32
 80019b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b6:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	f003 0320 	and.w	r3, r3, #32
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e6:	4b26      	ldr	r3, [pc, #152]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fc:	f000 ffd8 	bl	80029b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	481f      	ldr	r0, [pc, #124]	@ (8001a84 <MX_GPIO_Init+0x108>)
 8001a08:	f000 ffd2 	bl	80029b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4819      	ldr	r0, [pc, #100]	@ (8001a88 <MX_GPIO_Init+0x10c>)
 8001a24:	f000 fe42 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8001a28:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a44:	f000 fe32 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <MX_GPIO_Init+0x108>)
 8001a62:	f000 fe23 	bl	80026ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2028      	movs	r0, #40	@ 0x28
 8001a6c:	f000 fde9 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a70:	2028      	movs	r0, #40	@ 0x28
 8001a72:	f000 fe00 	bl	8002676 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	@ 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800

08001a8c <StpperMotorControlled>:

/* USER CODE BEGIN 4 */
void StpperMotorControlled()
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
	if (Speed < -20)
 8001a94:	4bc9      	ldr	r3, [pc, #804]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f113 0f14 	cmn.w	r3, #20
 8001a9c:	da60      	bge.n	8001b60 <StpperMotorControlled+0xd4>
	{
		freq = 1;
 8001a9e:	4bc8      	ldr	r3, [pc, #800]	@ (8001dc0 <StpperMotorControlled+0x334>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aae:	f000 ff7f 	bl	80029b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aba:	f000 ff79 	bl	80029b0 <HAL_GPIO_WritePin>
		if (fabs(Speed) > 170)
 8001abe:	4bbf      	ldr	r3, [pc, #764]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fcfa 	bl	80004bc <__aeabi_i2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	603a      	str	r2, [r7, #0]
 8001ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4bba      	ldr	r3, [pc, #744]	@ (8001dc4 <StpperMotorControlled+0x338>)
 8001ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ade:	f7fe ffe7 	bl	8000ab0 <__aeabi_dcmpgt>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02c      	beq.n	8001b42 <StpperMotorControlled+0xb6>
		{
			PWM_write_duty(&StepperL, fabs(Speed), 50);
 8001ae8:	4bb4      	ldr	r3, [pc, #720]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fce5 	bl	80004bc <__aeabi_i2d>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f803 	bl	8000b04 <__aeabi_d2f>
 8001afe:	ee07 0a90 	vmov	s15, r0
 8001b02:	eef0 7ae7 	vabs.f32	s15, s15
 8001b06:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	48af      	ldr	r0, [pc, #700]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001b10:	f7ff f9e2 	bl	8000ed8 <PWM_write_duty>
			PWM_write_duty(&StepperR, fabs(Speed), 50);
 8001b14:	4ba9      	ldr	r3, [pc, #676]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fccf 	bl	80004bc <__aeabi_i2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7fe ffed 	bl	8000b04 <__aeabi_d2f>
 8001b2a:	ee07 0a90 	vmov	s15, r0
 8001b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b32:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	48a5      	ldr	r0, [pc, #660]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001b3c:	f7ff f9cc 	bl	8000ed8 <PWM_write_duty>
				PWM_write_duty(&StepperL, 0, 50);
				PWM_write_duty(&StepperR, 0, 50);
			}
		}
	}
}
 8001b40:	e136      	b.n	8001db0 <StpperMotorControlled+0x324>
			PWM_write_duty(&StepperL, 0, 50);
 8001b42:	eddf 0aa1 	vldr	s1, [pc, #644]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001b46:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001b4a:	48a0      	ldr	r0, [pc, #640]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001b4c:	f7ff f9c4 	bl	8000ed8 <PWM_write_duty>
			PWM_write_duty(&StepperR, 0, 50);
 8001b50:	eddf 0a9d 	vldr	s1, [pc, #628]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001b54:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001b58:	489d      	ldr	r0, [pc, #628]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001b5a:	f7ff f9bd 	bl	8000ed8 <PWM_write_duty>
}
 8001b5e:	e127      	b.n	8001db0 <StpperMotorControlled+0x324>
	else if (Speed > 20)
 8001b60:	4b96      	ldr	r3, [pc, #600]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b14      	cmp	r3, #20
 8001b66:	dd5f      	ble.n	8001c28 <StpperMotorControlled+0x19c>
		freq = 2;
 8001b68:	4b95      	ldr	r3, [pc, #596]	@ (8001dc0 <StpperMotorControlled+0x334>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b78:	f000 ff1a 	bl	80029b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	@ 0x80
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b84:	f000 ff14 	bl	80029b0 <HAL_GPIO_WritePin>
		if (fabs(Speed) > 170)
 8001b88:	4b8c      	ldr	r3, [pc, #560]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc95 	bl	80004bc <__aeabi_i2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4692      	mov	sl, r2
 8001b98:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b88      	ldr	r3, [pc, #544]	@ (8001dc4 <StpperMotorControlled+0x338>)
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	f7fe ff83 	bl	8000ab0 <__aeabi_dcmpgt>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02c      	beq.n	8001c0a <StpperMotorControlled+0x17e>
			PWM_write_duty(&StepperL, fabs(Speed), 50);
 8001bb0:	4b82      	ldr	r3, [pc, #520]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc81 	bl	80004bc <__aeabi_i2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ff9f 	bl	8000b04 <__aeabi_d2f>
 8001bc6:	ee07 0a90 	vmov	s15, r0
 8001bca:	eef0 7ae7 	vabs.f32	s15, s15
 8001bce:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd6:	487d      	ldr	r0, [pc, #500]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001bd8:	f7ff f97e 	bl	8000ed8 <PWM_write_duty>
			PWM_write_duty(&StepperR, fabs(Speed), 50);
 8001bdc:	4b77      	ldr	r3, [pc, #476]	@ (8001dbc <StpperMotorControlled+0x330>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc6b 	bl	80004bc <__aeabi_i2d>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe ff89 	bl	8000b04 <__aeabi_d2f>
 8001bf2:	ee07 0a90 	vmov	s15, r0
 8001bf6:	eef0 7ae7 	vabs.f32	s15, s15
 8001bfa:	eddf 0a73 	vldr	s1, [pc, #460]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	4873      	ldr	r0, [pc, #460]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001c04:	f7ff f968 	bl	8000ed8 <PWM_write_duty>
}
 8001c08:	e0d2      	b.n	8001db0 <StpperMotorControlled+0x324>
			PWM_write_duty(&StepperL, 0, 50);
 8001c0a:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001c0e:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001c12:	486e      	ldr	r0, [pc, #440]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001c14:	f7ff f960 	bl	8000ed8 <PWM_write_duty>
			PWM_write_duty(&StepperR, 0, 50);
 8001c18:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001c1c:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001c20:	486b      	ldr	r0, [pc, #428]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001c22:	f7ff f959 	bl	8000ed8 <PWM_write_duty>
}
 8001c26:	e0c3      	b.n	8001db0 <StpperMotorControlled+0x324>
		freq = 0;
 8001c28:	4b65      	ldr	r3, [pc, #404]	@ (8001dc0 <StpperMotorControlled+0x334>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
		if (Turn < 0)
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da5c      	bge.n	8001cf0 <StpperMotorControlled+0x264>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c40:	f000 feb6 	bl	80029b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	@ 0x80
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4c:	f000 feb0 	bl	80029b0 <HAL_GPIO_WritePin>
			if (fabs(Turn) > 170)
 8001c50:	4b61      	ldr	r3, [pc, #388]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc31 	bl	80004bc <__aeabi_i2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4690      	mov	r8, r2
 8001c60:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b56      	ldr	r3, [pc, #344]	@ (8001dc4 <StpperMotorControlled+0x338>)
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	f7fe ff1f 	bl	8000ab0 <__aeabi_dcmpgt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d02c      	beq.n	8001cd2 <StpperMotorControlled+0x246>
				PWM_write_duty(&StepperL, fabs(Turn), 50);
 8001c78:	4b57      	ldr	r3, [pc, #348]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc1d 	bl	80004bc <__aeabi_i2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff3b 	bl	8000b04 <__aeabi_d2f>
 8001c8e:	ee07 0a90 	vmov	s15, r0
 8001c92:	eef0 7ae7 	vabs.f32	s15, s15
 8001c96:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9e:	484b      	ldr	r0, [pc, #300]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001ca0:	f7ff f91a 	bl	8000ed8 <PWM_write_duty>
				PWM_write_duty(&StepperR, fabs(Turn), 50);
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc07 	bl	80004bc <__aeabi_i2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff25 	bl	8000b04 <__aeabi_d2f>
 8001cba:	ee07 0a90 	vmov	s15, r0
 8001cbe:	eef0 7ae7 	vabs.f32	s15, s15
 8001cc2:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	4841      	ldr	r0, [pc, #260]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001ccc:	f7ff f904 	bl	8000ed8 <PWM_write_duty>
}
 8001cd0:	e06e      	b.n	8001db0 <StpperMotorControlled+0x324>
				PWM_write_duty(&StepperL, 0, 50);
 8001cd2:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001cd6:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001cda:	483c      	ldr	r0, [pc, #240]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001cdc:	f7ff f8fc 	bl	8000ed8 <PWM_write_duty>
				PWM_write_duty(&StepperR, 0, 50);
 8001ce0:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001ce4:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001ce8:	4839      	ldr	r0, [pc, #228]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001cea:	f7ff f8f5 	bl	8000ed8 <PWM_write_duty>
}
 8001cee:	e05f      	b.n	8001db0 <StpperMotorControlled+0x324>
		else if (Turn > 0)
 8001cf0:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dd5b      	ble.n	8001db0 <StpperMotorControlled+0x324>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d02:	f000 fe55 	bl	80029b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001d06:	2201      	movs	r2, #1
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0e:	f000 fe4f 	bl	80029b0 <HAL_GPIO_WritePin>
			if (fabs(Turn) > 170)
 8001d12:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fbd0 	bl	80004bc <__aeabi_i2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4614      	mov	r4, r2
 8001d22:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <StpperMotorControlled+0x338>)
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f7fe febe 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02c      	beq.n	8001d94 <StpperMotorControlled+0x308>
				PWM_write_duty(&StepperL, fabs(Turn), 50);
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbbc 	bl	80004bc <__aeabi_i2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe feda 	bl	8000b04 <__aeabi_d2f>
 8001d50:	ee07 0a90 	vmov	s15, r0
 8001d54:	eef0 7ae7 	vabs.f32	s15, s15
 8001d58:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d60:	481a      	ldr	r0, [pc, #104]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001d62:	f7ff f8b9 	bl	8000ed8 <PWM_write_duty>
				PWM_write_duty(&StepperR, fabs(Turn), 50);
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <StpperMotorControlled+0x34c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fba6 	bl	80004bc <__aeabi_i2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fec4 	bl	8000b04 <__aeabi_d2f>
 8001d7c:	ee07 0a90 	vmov	s15, r0
 8001d80:	eef0 7ae7 	vabs.f32	s15, s15
 8001d84:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	4810      	ldr	r0, [pc, #64]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001d8e:	f7ff f8a3 	bl	8000ed8 <PWM_write_duty>
}
 8001d92:	e00d      	b.n	8001db0 <StpperMotorControlled+0x324>
				PWM_write_duty(&StepperL, 0, 50);
 8001d94:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001d98:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001d9c:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <StpperMotorControlled+0x340>)
 8001d9e:	f7ff f89b 	bl	8000ed8 <PWM_write_duty>
				PWM_write_duty(&StepperR, 0, 50);
 8001da2:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001dc8 <StpperMotorControlled+0x33c>
 8001da6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001dd4 <StpperMotorControlled+0x348>
 8001daa:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <StpperMotorControlled+0x344>)
 8001dac:	f7ff f894 	bl	8000ed8 <PWM_write_duty>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000244 	.word	0x20000244
 8001dc0:	20000250 	.word	0x20000250
 8001dc4:	40654000 	.word	0x40654000
 8001dc8:	42480000 	.word	0x42480000
 8001dcc:	20000254 	.word	0x20000254
 8001dd0:	2000026c 	.word	0x2000026c
 8001dd4:	00000000 	.word	0x00000000
 8001dd8:	20000248 	.word	0x20000248

08001ddc <BrusheMotorControlled>:
void BrusheMotorControlled()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	if (Brush)
 8001de0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <BrusheMotorControlled+0x3c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00d      	beq.n	8001e04 <BrusheMotorControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dee:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <BrusheMotorControlled+0x40>)
 8001df0:	f000 fdde 	bl	80029b0 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001df4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001e20 <BrusheMotorControlled+0x44>
 8001df8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001e24 <BrusheMotorControlled+0x48>
 8001dfc:	480a      	ldr	r0, [pc, #40]	@ (8001e28 <BrusheMotorControlled+0x4c>)
 8001dfe:	f7ff f86b 	bl	8000ed8 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001e02:	e006      	b.n	8001e12 <BrusheMotorControlled+0x36>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001e04:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001e2c <BrusheMotorControlled+0x50>
 8001e08:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001e24 <BrusheMotorControlled+0x48>
 8001e0c:	4806      	ldr	r0, [pc, #24]	@ (8001e28 <BrusheMotorControlled+0x4c>)
 8001e0e:	f7ff f863 	bl	8000ed8 <PWM_write_duty>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000024c 	.word	0x2000024c
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	42c80000 	.word	0x42c80000
 8001e24:	44fa0000 	.word	0x44fa0000
 8001e28:	20000284 	.word	0x20000284
 8001e2c:	00000000 	.word	0x00000000

08001e30 <ReadController>:
void ReadController()
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	FB_Read = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 8001e34:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <ReadController+0x84>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <ReadController+0x88>)
 8001e3e:	801a      	strh	r2, [r3, #0]
	LR_Read = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <ReadController+0x8c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <ReadController+0x90>)
 8001e4a:	801a      	strh	r2, [r3, #0]
	BR_Read = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_2);
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <ReadController+0x94>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <ReadController+0x98>)
 8001e56:	801a      	strh	r2, [r3, #0]

	Speed = mapValue(FB_Read, -MaxSpeed, MaxSpeed);
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <ReadController+0x88>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <ReadController+0x9c>)
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	b292      	uxth	r2, r2
 8001e62:	4252      	negs	r2, r2
 8001e64:	b292      	uxth	r2, r2
 8001e66:	b211      	sxth	r1, r2
 8001e68:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <ReadController+0x9c>)
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	b212      	sxth	r2, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f834 	bl	8001edc <mapValue>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <ReadController+0xa0>)
 8001e78:	6013      	str	r3, [r2, #0]
	Turn  = mapValue(LR_Read, -MaxSpeed, MaxSpeed);
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <ReadController+0x90>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <ReadController+0x9c>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	b292      	uxth	r2, r2
 8001e84:	4252      	negs	r2, r2
 8001e86:	b292      	uxth	r2, r2
 8001e88:	b211      	sxth	r1, r2
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <ReadController+0x9c>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	b212      	sxth	r2, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f823 	bl	8001edc <mapValue>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <ReadController+0xa4>)
 8001e9a:	6013      	str	r3, [r2, #0]
	Brush = mapValue(BR_Read, 0, 2);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <ReadController+0x98>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f819 	bl	8001edc <mapValue>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <ReadController+0xa8>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200000c0 	.word	0x200000c0
 8001eb8:	2000023c 	.word	0x2000023c
 8001ebc:	2000010c 	.word	0x2000010c
 8001ec0:	2000023e 	.word	0x2000023e
 8001ec4:	20000158 	.word	0x20000158
 8001ec8:	20000240 	.word	0x20000240
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000244 	.word	0x20000244
 8001ed4:	20000248 	.word	0x20000248
 8001ed8:	2000024c 	.word	0x2000024c

08001edc <mapValue>:
int mapValue(uint16_t inputValue, int16_t Min, int16_t Max)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	80bb      	strh	r3, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	807b      	strh	r3, [r7, #2]
    // Map from 1000-2010 to Min-Max
    return (int16_t)(((int32_t)(inputValue - 1000) * (Max - Min)) / 1010 + Min);
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ef4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001ef8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001efc:	1a8a      	subs	r2, r1, r2
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	@ (8001f28 <mapValue+0x4c>)
 8001f04:	fb82 1203 	smull	r1, r2, r2, r3
 8001f08:	441a      	add	r2, r3
 8001f0a:	1252      	asrs	r2, r2, #9
 8001f0c:	17db      	asrs	r3, r3, #31
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	88bb      	ldrh	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b21b      	sxth	r3, r3
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	81c635bd 	.word	0x81c635bd

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <Error_Handler+0x8>

08001f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_MspInit+0x44>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <HAL_MspInit+0x44>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_MspInit+0x44>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_MspInit+0x44>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_MspInit+0x44>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_MspInit+0x44>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f6e:	f000 fdff 	bl	8002b70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b09e      	sub	sp, #120	@ 0x78
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	2254      	movs	r2, #84	@ 0x54
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fa5d 	bl	8006460 <memset>
  if(huart->Instance==LPUART1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1f      	ldr	r2, [pc, #124]	@ (8002028 <HAL_UART_MspInit+0xa8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d136      	bne.n	800201e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 fb15 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc8:	f7ff ffb0 	bl	8001f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fcc:	4b17      	ldr	r3, [pc, #92]	@ (800202c <HAL_UART_MspInit+0xac>)
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	4a16      	ldr	r2, [pc, #88]	@ (800202c <HAL_UART_MspInit+0xac>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <HAL_UART_MspInit+0xac>)
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_UART_MspInit+0xac>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_UART_MspInit+0xac>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_UART_MspInit+0xac>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800200c:	230c      	movs	r3, #12
 800200e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800201a:	f000 fb47 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3778      	adds	r7, #120	@ 0x78
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40008000 	.word	0x40008000
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b090      	sub	sp, #64	@ 0x40
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a58      	ldr	r2, [pc, #352]	@ (80021b0 <HAL_TIM_Base_MspInit+0x180>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12a      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002052:	4b58      	ldr	r3, [pc, #352]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	4a57      	ldr	r2, [pc, #348]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002058:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800205c:	6613      	str	r3, [r2, #96]	@ 0x60
 800205e:	4b55      	ldr	r3, [pc, #340]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002068:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b52      	ldr	r3, [pc, #328]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002076:	4b4f      	ldr	r3, [pc, #316]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002082:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002094:	2306      	movs	r3, #6
 8002096:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a2:	f000 fb03 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80020a6:	e07e      	b.n	80021a6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a42      	ldr	r2, [pc, #264]	@ (80021b8 <HAL_TIM_Base_MspInit+0x188>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d128      	bne.n	8002104 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	4b40      	ldr	r3, [pc, #256]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	4a3f      	ldr	r2, [pc, #252]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020be:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b3a      	ldr	r3, [pc, #232]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a39      	ldr	r2, [pc, #228]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b37      	ldr	r3, [pc, #220]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020e2:	2310      	movs	r3, #16
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f2:	2302      	movs	r3, #2
 80020f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fa:	4619      	mov	r1, r3
 80020fc:	482f      	ldr	r0, [pc, #188]	@ (80021bc <HAL_TIM_Base_MspInit+0x18c>)
 80020fe:	f000 fad5 	bl	80026ac <HAL_GPIO_Init>
}
 8002102:	e050      	b.n	80021a6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM4)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2d      	ldr	r2, [pc, #180]	@ (80021c0 <HAL_TIM_Base_MspInit+0x190>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d128      	bne.n	8002160 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210e:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	4a28      	ldr	r2, [pc, #160]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
 800211a:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	4a22      	ldr	r2, [pc, #136]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800213e:	2340      	movs	r3, #64	@ 0x40
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800214e:	2302      	movs	r3, #2
 8002150:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002156:	4619      	mov	r1, r3
 8002158:	4818      	ldr	r0, [pc, #96]	@ (80021bc <HAL_TIM_Base_MspInit+0x18c>)
 800215a:	f000 faa7 	bl	80026ac <HAL_GPIO_Init>
}
 800215e:	e022      	b.n	80021a6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <HAL_TIM_Base_MspInit+0x194>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10c      	bne.n	8002184 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	4a11      	ldr	r2, [pc, #68]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002170:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002174:	6613      	str	r3, [r2, #96]	@ 0x60
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
}
 8002182:	e010      	b.n	80021a6 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM20)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <HAL_TIM_Base_MspInit+0x198>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10b      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 8002194:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002198:	6613      	str	r3, [r2, #96]	@ 0x60
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_TIM_Base_MspInit+0x184>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	bf00      	nop
 80021a8:	3740      	adds	r7, #64	@ 0x40
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40000400 	.word	0x40000400
 80021bc:	48000400 	.word	0x48000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40013400 	.word	0x40013400
 80021c8:	40015000 	.word	0x40015000

080021cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a31      	ldr	r2, [pc, #196]	@ (80022b0 <HAL_TIM_MspPostInit+0xe4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d13a      	bne.n	8002264 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	4b31      	ldr	r3, [pc, #196]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4a30      	ldr	r2, [pc, #192]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fa:	4b2e      	ldr	r3, [pc, #184]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002212:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PA15     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800222e:	2304      	movs	r3, #4
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	481f      	ldr	r0, [pc, #124]	@ (80022b8 <HAL_TIM_MspPostInit+0xec>)
 800223a:	f000 fa37 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800223e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002250:	2302      	movs	r3, #2
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800225e:	f000 fa25 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002262:	e020      	b.n	80022a6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <HAL_TIM_MspPostInit+0xf0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d11b      	bne.n	80022a6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227a:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_TIM_MspPostInit+0xe8>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002286:	2304      	movs	r3, #4
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002296:	2303      	movs	r3, #3
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <HAL_TIM_MspPostInit+0xf4>)
 80022a2:	f000 fa03 	bl	80026ac <HAL_GPIO_Init>
}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	@ 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40013400 	.word	0x40013400
 80022b4:	40021000 	.word	0x40021000
 80022b8:	48000800 	.word	0x48000800
 80022bc:	40015000 	.word	0x40015000
 80022c0:	48000400 	.word	0x48000400

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <NMI_Handler+0x4>

080022cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <HardFault_Handler+0x4>

080022d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <MemManage_Handler+0x4>

080022dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231a:	f000 f899 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}

08002322 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002326:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800232a:	f000 fb59 	bl	80029e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002358:	480d      	ldr	r0, [pc, #52]	@ (8002390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800235a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800235c:	f7ff ffea 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	@ (80023a4 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f004 f873 	bl	8006470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7fe fea9 	bl	80010e0 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   r0, =_estack
 8002390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800239c:	08006520 	.word	0x08006520
  ldr r2, =_sbss
 80023a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80023a4:	200002a0 	.word	0x200002a0

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>

080023aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f939 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ba:	2000      	movs	r0, #0
 80023bc:	f000 f80e 	bl	80023dc <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	e001      	b.n	80023d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023cc:	f7ff fdb4 	bl	8001f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d0:	79fb      	ldrb	r3, [r7, #7]

}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023e8:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <HAL_InitTick+0x68>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d022      	beq.n	8002436 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023f0:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_InitTick+0x6c>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_InitTick+0x68>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f944 	bl	8002692 <HAL_SYSTICK_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10f      	bne.n	8002430 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	d809      	bhi.n	800242a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002416:	2200      	movs	r2, #0
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	f04f 30ff 	mov.w	r0, #4294967295
 800241e:	f000 f910 	bl	8002642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <HAL_InitTick+0x70>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e007      	b.n	800243a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e004      	b.n	800243a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000000c 	.word	0x2000000c
 8002448:	20000004 	.word	0x20000004
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_IncTick+0x1c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_IncTick+0x20>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4413      	add	r3, r2
 800245e:	4a03      	ldr	r2, [pc, #12]	@ (800246c <HAL_IncTick+0x1c>)
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	2000029c 	.word	0x2000029c
 8002470:	2000000c 	.word	0x2000000c

08002474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000029c 	.word	0x2000029c

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	@ (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	@ (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	@ (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff40 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff33 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa4 	bl	80025e8 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ba:	e15a      	b.n	8002972 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 814c 	beq.w	800296c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d005      	beq.n	80026ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0201 	and.w	r2, r3, #1
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b03      	cmp	r3, #3
 8002758:	d017      	beq.n	800278a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d123      	bne.n	80027de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	6939      	ldr	r1, [r7, #16]
 80027da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a6 	beq.w	800296c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002820:	4b5b      	ldr	r3, [pc, #364]	@ (8002990 <HAL_GPIO_Init+0x2e4>)
 8002822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002824:	4a5a      	ldr	r2, [pc, #360]	@ (8002990 <HAL_GPIO_Init+0x2e4>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6613      	str	r3, [r2, #96]	@ 0x60
 800282c:	4b58      	ldr	r3, [pc, #352]	@ (8002990 <HAL_GPIO_Init+0x2e4>)
 800282e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002838:	4a56      	ldr	r2, [pc, #344]	@ (8002994 <HAL_GPIO_Init+0x2e8>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002862:	d01f      	beq.n	80028a4 <HAL_GPIO_Init+0x1f8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a4c      	ldr	r2, [pc, #304]	@ (8002998 <HAL_GPIO_Init+0x2ec>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d019      	beq.n	80028a0 <HAL_GPIO_Init+0x1f4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a4b      	ldr	r2, [pc, #300]	@ (800299c <HAL_GPIO_Init+0x2f0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_GPIO_Init+0x1f0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4a      	ldr	r2, [pc, #296]	@ (80029a0 <HAL_GPIO_Init+0x2f4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00d      	beq.n	8002898 <HAL_GPIO_Init+0x1ec>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a49      	ldr	r2, [pc, #292]	@ (80029a4 <HAL_GPIO_Init+0x2f8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <HAL_GPIO_Init+0x1e8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a48      	ldr	r2, [pc, #288]	@ (80029a8 <HAL_GPIO_Init+0x2fc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_GPIO_Init+0x1e4>
 800288c:	2305      	movs	r3, #5
 800288e:	e00a      	b.n	80028a6 <HAL_GPIO_Init+0x1fa>
 8002890:	2306      	movs	r3, #6
 8002892:	e008      	b.n	80028a6 <HAL_GPIO_Init+0x1fa>
 8002894:	2304      	movs	r3, #4
 8002896:	e006      	b.n	80028a6 <HAL_GPIO_Init+0x1fa>
 8002898:	2303      	movs	r3, #3
 800289a:	e004      	b.n	80028a6 <HAL_GPIO_Init+0x1fa>
 800289c:	2302      	movs	r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x1fa>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_GPIO_Init+0x1fa>
 80028a4:	2300      	movs	r3, #0
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	f002 0203 	and.w	r2, r2, #3
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	4093      	lsls	r3, r2
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b6:	4937      	ldr	r1, [pc, #220]	@ (8002994 <HAL_GPIO_Init+0x2e8>)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c4:	4b39      	ldr	r3, [pc, #228]	@ (80029ac <HAL_GPIO_Init+0x300>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e8:	4a30      	ldr	r2, [pc, #192]	@ (80029ac <HAL_GPIO_Init+0x300>)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ee:	4b2f      	ldr	r3, [pc, #188]	@ (80029ac <HAL_GPIO_Init+0x300>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002912:	4a26      	ldr	r2, [pc, #152]	@ (80029ac <HAL_GPIO_Init+0x300>)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002918:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_GPIO_Init+0x300>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800293c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_GPIO_Init+0x300>)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002942:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_GPIO_Init+0x300>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002966:	4a11      	ldr	r2, [pc, #68]	@ (80029ac <HAL_GPIO_Init+0x300>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3301      	adds	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f ae9d 	bne.w	80026bc <HAL_GPIO_Init+0x10>
  }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40021000 	.word	0x40021000
 8002994:	40010000 	.word	0x40010000
 8002998:	48000400 	.word	0x48000400
 800299c:	48000800 	.word	0x48000800
 80029a0:	48000c00 	.word	0x48000c00
 80029a4:	48001000 	.word	0x48001000
 80029a8:	48001400 	.word	0x48001400
 80029ac:	40010400 	.word	0x40010400

080029b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c0:	787b      	ldrb	r3, [r7, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ea:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f806 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d141      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a36:	4b4b      	ldr	r3, [pc, #300]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a42:	d131      	bne.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a44:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a4a:	4a46      	ldr	r2, [pc, #280]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a54:	4b43      	ldr	r3, [pc, #268]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a5c:	4a41      	ldr	r2, [pc, #260]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a64:	4b40      	ldr	r3, [pc, #256]	@ (8002b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2232      	movs	r2, #50	@ 0x32
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7a:	e002      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a82:	4b38      	ldr	r3, [pc, #224]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a8e:	d102      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f2      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a96:	4b33      	ldr	r3, [pc, #204]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa2:	d158      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e057      	b.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aae:	4a2d      	ldr	r2, [pc, #180]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ab8:	e04d      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ac0:	d141      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ac2:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ace:	d131      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad6:	4a23      	ldr	r2, [pc, #140]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002adc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae0:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2232      	movs	r2, #50	@ 0x32
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b06:	e002      	b.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1a:	d102      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f2      	bne.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2e:	d112      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e011      	b.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b44:	e007      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b7e:	6093      	str	r3, [r2, #8]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40007000 	.word	0x40007000

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e2fe      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d075      	beq.n	8002c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bae:	4b97      	ldr	r3, [pc, #604]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb8:	4b94      	ldr	r3, [pc, #592]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0x3e>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x44>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05b      	beq.n	8002c98 <HAL_RCC_OscConfig+0x108>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d157      	bne.n	8002c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e2d9      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x74>
 8002bf6:	4b85      	ldr	r3, [pc, #532]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a84      	ldr	r2, [pc, #528]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x98>
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7e      	ldr	r2, [pc, #504]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c28:	4b78      	ldr	r3, [pc, #480]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a77      	ldr	r2, [pc, #476]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b75      	ldr	r3, [pc, #468]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a74      	ldr	r2, [pc, #464]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff fc14 	bl	8002474 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff fc10 	bl	8002474 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e29e      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	4b6a      	ldr	r3, [pc, #424]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xc0>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff fc00 	bl	8002474 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff fbfc 	bl	8002474 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e28a      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8a:	4b60      	ldr	r3, [pc, #384]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0xe8>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca6:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb0:	4b56      	ldr	r3, [pc, #344]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x136>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_OscConfig+0x13c>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11f      	bne.n	8002d0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x154>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e25d      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b49      	ldr	r3, [pc, #292]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	4946      	ldr	r1, [pc, #280]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cf8:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fb6d 	bl	80023dc <HAL_InitTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d043      	beq.n	8002d90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e249      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3c      	ldr	r2, [pc, #240]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fba8 	bl	8002474 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff fba4 	bl	8002474 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e232      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3a:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	492d      	ldr	r1, [pc, #180]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2a      	ldr	r2, [pc, #168]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff fb84 	bl	8002474 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7ff fb80 	bl	8002474 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e20e      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d82:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1e0>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d041      	beq.n	8002e22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dac:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7ff fb5d 	bl	8002474 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7ff fb59 	bl	8002474 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1e7      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ef      	beq.n	8002dbe <HAL_RCC_OscConfig+0x22e>
 8002dde:	e020      	b.n	8002e22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de6:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7ff fb40 	bl	8002474 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df6:	e00d      	b.n	8002e14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7ff fb3c 	bl	8002474 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d906      	bls.n	8002e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1ca      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e14:	4b8c      	ldr	r3, [pc, #560]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ea      	bne.n	8002df8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a6 	beq.w	8002f7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e34:	4b84      	ldr	r3, [pc, #528]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2b4>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x2b6>
 8002e44:	2300      	movs	r3, #0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e56:	4b7c      	ldr	r3, [pc, #496]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e66:	4b79      	ldr	r3, [pc, #484]	@ (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e72:	4b76      	ldr	r3, [pc, #472]	@ (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	@ (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff faf9 	bl	8002474 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7ff faf5 	bl	8002474 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e183      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e98:	4b6c      	ldr	r3, [pc, #432]	@ (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_RCC_OscConfig+0x32e>
 8002eac:	4b66      	ldr	r3, [pc, #408]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	4a65      	ldr	r2, [pc, #404]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ebc:	e024      	b.n	8002f08 <HAL_RCC_OscConfig+0x378>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d110      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x358>
 8002ec6:	4b60      	ldr	r3, [pc, #384]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	4a5a      	ldr	r2, [pc, #360]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee6:	e00f      	b.n	8002f08 <HAL_RCC_OscConfig+0x378>
 8002ee8:	4b57      	ldr	r3, [pc, #348]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	4a56      	ldr	r2, [pc, #344]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ef8:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff fab0 	bl	8002474 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7ff faac 	bl	8002474 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e138      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2e:	4b46      	ldr	r3, [pc, #280]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ed      	beq.n	8002f18 <HAL_RCC_OscConfig+0x388>
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7ff fa99 	bl	8002474 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7ff fa95 	bl	8002474 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e121      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ed      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	4a34      	ldr	r2, [pc, #208]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d03c      	beq.n	8003002 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01c      	beq.n	8002fca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f90:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f96:	4a2c      	ldr	r2, [pc, #176]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7ff fa68 	bl	8002474 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa8:	f7ff fa64 	bl	8002474 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0f2      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fba:	4b23      	ldr	r3, [pc, #140]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x418>
 8002fc8:	e01b      	b.n	8003002 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fca:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fda:	f7ff fa4b 	bl	8002474 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe2:	f7ff fa47 	bl	8002474 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0d5      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ef      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80c9 	beq.w	800319e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b0c      	cmp	r3, #12
 8003016:	f000 8083 	beq.w	8003120 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d15e      	bne.n	80030e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a08      	ldr	r2, [pc, #32]	@ (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800302c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff fa21 	bl	8002474 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	e00c      	b.n	8003050 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003036:	f7ff fa1d 	bl	8002474 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d905      	bls.n	8003050 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0ab      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003050:	4b55      	ldr	r3, [pc, #340]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ec      	bne.n	8003036 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	4b52      	ldr	r3, [pc, #328]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b52      	ldr	r3, [pc, #328]	@ (80031ac <HAL_RCC_OscConfig+0x61c>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6a11      	ldr	r1, [r2, #32]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800306c:	3a01      	subs	r2, #1
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	4311      	orrs	r1, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003076:	0212      	lsls	r2, r2, #8
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800307e:	0852      	lsrs	r2, r2, #1
 8003080:	3a01      	subs	r2, #1
 8003082:	0552      	lsls	r2, r2, #21
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800308a:	0852      	lsrs	r2, r2, #1
 800308c:	3a01      	subs	r2, #1
 800308e:	0652      	lsls	r2, r2, #25
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003096:	06d2      	lsls	r2, r2, #27
 8003098:	430a      	orrs	r2, r1
 800309a:	4943      	ldr	r1, [pc, #268]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 800309c:	4313      	orrs	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b41      	ldr	r3, [pc, #260]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a40      	ldr	r2, [pc, #256]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ac:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a3d      	ldr	r2, [pc, #244]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7ff f9dc 	bl	8002474 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff f9d8 	bl	8002474 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e066      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	4b35      	ldr	r3, [pc, #212]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x530>
 80030de:	e05e      	b.n	800319e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a30      	ldr	r2, [pc, #192]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7ff f9c2 	bl	8002474 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7ff f9be 	bl	8002474 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e04c      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	4b28      	ldr	r3, [pc, #160]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003112:	4b25      	ldr	r3, [pc, #148]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	4924      	ldr	r1, [pc, #144]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 8003118:	4b25      	ldr	r3, [pc, #148]	@ (80031b0 <HAL_RCC_OscConfig+0x620>)
 800311a:	4013      	ands	r3, r2
 800311c:	60cb      	str	r3, [r1, #12]
 800311e:	e03e      	b.n	800319e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e039      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800312c:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <HAL_RCC_OscConfig+0x618>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	429a      	cmp	r2, r3
 800313e:	d12c      	bne.n	800319a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	3b01      	subs	r3, #1
 800314c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d123      	bne.n	800319a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11b      	bne.n	800319a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d113      	bne.n	800319a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d109      	bne.n	800319a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	3b01      	subs	r3, #1
 8003194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	019f800c 	.word	0x019f800c
 80031b0:	feeefffc 	.word	0xfeeefffc

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e11e      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b91      	ldr	r3, [pc, #580]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d910      	bls.n	80031fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	498c      	ldr	r1, [pc, #560]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e106      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d073      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d129      	bne.n	8003264 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003210:	4b81      	ldr	r3, [pc, #516]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0f4      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003220:	f000 f99e 	bl	8003560 <RCC_GetSysClockFreqFromPLLSource>
 8003224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4a7c      	ldr	r2, [pc, #496]	@ (800341c <HAL_RCC_ClockConfig+0x268>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d93f      	bls.n	80032ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800322e:	4b7a      	ldr	r3, [pc, #488]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d033      	beq.n	80032ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12f      	bne.n	80032ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800324e:	4b72      	ldr	r3, [pc, #456]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003256:	4a70      	ldr	r2, [pc, #448]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800325c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e024      	b.n	80032ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326c:	4b6a      	ldr	r3, [pc, #424]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0c6      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b66      	ldr	r3, [pc, #408]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0be      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800328c:	f000 f8ce 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8003290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4a61      	ldr	r2, [pc, #388]	@ (800341c <HAL_RCC_ClockConfig+0x268>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d909      	bls.n	80032ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329a:	4b5f      	ldr	r3, [pc, #380]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4957      	ldr	r1, [pc, #348]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c0:	f7ff f8d8 	bl	8002474 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7ff f8d4 	bl	8002474 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e095      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b4e      	ldr	r3, [pc, #312]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b43      	ldr	r3, [pc, #268]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a42      	ldr	r2, [pc, #264]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800330e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003312:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003320:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003328:	4a3b      	ldr	r2, [pc, #236]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800332a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800332e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4936      	ldr	r1, [pc, #216]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
 8003342:	e008      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b80      	cmp	r3, #128	@ 0x80
 8003348:	d105      	bne.n	8003356 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800334a:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003354:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003356:	4b2f      	ldr	r3, [pc, #188]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d21d      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 020f 	bic.w	r2, r3, #15
 800336c:	4929      	ldr	r1, [pc, #164]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003374:	f7ff f87e 	bl	8002474 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7ff f87a 	bl	8002474 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03b      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <HAL_RCC_ClockConfig+0x260>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d1ed      	bne.n	800337c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4917      	ldr	r1, [pc, #92]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490f      	ldr	r1, [pc, #60]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033de:	f000 f825 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490c      	ldr	r1, [pc, #48]	@ (8003420 <HAL_RCC_ClockConfig+0x26c>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <HAL_RCC_ClockConfig+0x270>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_RCC_ClockConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe ffea 	bl	80023dc <HAL_InitTick>
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	04c4b400 	.word	0x04c4b400
 8003420:	080064d0 	.word	0x080064d0
 8003424:	20000004 	.word	0x20000004
 8003428:	20000008 	.word	0x20000008

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003432:	4b2c      	ldr	r3, [pc, #176]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b04      	cmp	r3, #4
 800343c:	d102      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800343e:	4b2a      	ldr	r3, [pc, #168]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e047      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d102      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003450:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e03e      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003456:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d136      	bne.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800346c:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d10c      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003480:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348a:	68d2      	ldr	r2, [r2, #12]
 800348c:	0a12      	lsrs	r2, r2, #8
 800348e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	617b      	str	r3, [r7, #20]
      break;
 8003498:	e00c      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800349a:	4a13      	ldr	r2, [pc, #76]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	0a12      	lsrs	r2, r2, #8
 80034a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
      break;
 80034b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0e5b      	lsrs	r3, r3, #25
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	e001      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034d4:	693b      	ldr	r3, [r7, #16]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	016e3600 	.word	0x016e3600

080034f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4904      	ldr	r1, [pc, #16]	@ (8003530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	080064e0 	.word	0x080064e0

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003538:	f7ff ffda 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0adb      	lsrs	r3, r3, #11
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4904      	ldr	r1, [pc, #16]	@ (800355c <HAL_RCC_GetPCLK2Freq+0x28>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	080064e0 	.word	0x080064e0

08003560 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003566:	4b1e      	ldr	r3, [pc, #120]	@ (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003570:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3301      	adds	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d10c      	bne.n	800359e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003584:	4a17      	ldr	r2, [pc, #92]	@ (80035e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	4a14      	ldr	r2, [pc, #80]	@ (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358e:	68d2      	ldr	r2, [r2, #12]
 8003590:	0a12      	lsrs	r2, r2, #8
 8003592:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
    break;
 800359c:	e00c      	b.n	80035b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800359e:	4a12      	ldr	r2, [pc, #72]	@ (80035e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4a0e      	ldr	r2, [pc, #56]	@ (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	0a12      	lsrs	r2, r2, #8
 80035ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
    break;
 80035b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035b8:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0e5b      	lsrs	r3, r3, #25
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035d2:	687b      	ldr	r3, [r7, #4]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40021000 	.word	0x40021000
 80035e4:	016e3600 	.word	0x016e3600
 80035e8:	00f42400 	.word	0x00f42400

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8098 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b40      	ldr	r3, [pc, #256]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a3f      	ldr	r2, [pc, #252]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
 8003626:	4b3d      	ldr	r3, [pc, #244]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003636:	4b3a      	ldr	r3, [pc, #232]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a39      	ldr	r2, [pc, #228]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003642:	f7fe ff17 	bl	8002474 <HAL_GetTick>
 8003646:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003648:	e009      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe ff13 	bl	8002474 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	74fb      	strb	r3, [r7, #19]
        break;
 800365c:	e005      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800365e:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ef      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d159      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003670:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01e      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d019      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800368c:	4b23      	ldr	r3, [pc, #140]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003698:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	4a1f      	ldr	r2, [pc, #124]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	4a1b      	ldr	r2, [pc, #108]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b8:	4a18      	ldr	r2, [pc, #96]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fe fed3 	bl	8002474 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d0:	e00b      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe fecf 	bl	8002474 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d902      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	74fb      	strb	r3, [r7, #19]
            break;
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ec      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370c:	4903      	ldr	r1, [pc, #12]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003714:	e008      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	74bb      	strb	r3, [r7, #18]
 800371a:	e005      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003728:	7c7b      	ldrb	r3, [r7, #17]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4ba7      	ldr	r3, [pc, #668]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	4aa6      	ldr	r2, [pc, #664]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003746:	4ba1      	ldr	r3, [pc, #644]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374c:	f023 0203 	bic.w	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	499d      	ldr	r1, [pc, #628]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003768:	4b98      	ldr	r3, [pc, #608]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376e:	f023 020c 	bic.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4995      	ldr	r1, [pc, #596]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800378a:	4b90      	ldr	r3, [pc, #576]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	498c      	ldr	r1, [pc, #560]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ac:	4b87      	ldr	r3, [pc, #540]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	4984      	ldr	r1, [pc, #528]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ce:	4b7f      	ldr	r3, [pc, #508]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	497b      	ldr	r1, [pc, #492]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f0:	4b76      	ldr	r3, [pc, #472]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4973      	ldr	r1, [pc, #460]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003812:	4b6e      	ldr	r3, [pc, #440]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003818:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	496a      	ldr	r1, [pc, #424]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003834:	4b65      	ldr	r3, [pc, #404]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4962      	ldr	r1, [pc, #392]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003856:	4b5d      	ldr	r3, [pc, #372]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	4959      	ldr	r1, [pc, #356]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003878:	4b54      	ldr	r3, [pc, #336]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	4951      	ldr	r1, [pc, #324]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389a:	4b4c      	ldr	r3, [pc, #304]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	4948      	ldr	r1, [pc, #288]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d015      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038bc:	4b43      	ldr	r3, [pc, #268]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	4940      	ldr	r1, [pc, #256]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038da:	d105      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a3a      	ldr	r2, [pc, #232]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d015      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f4:	4b35      	ldr	r3, [pc, #212]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003902:	4932      	ldr	r1, [pc, #200]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003912:	d105      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003914:	4b2d      	ldr	r3, [pc, #180]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a2c      	ldr	r2, [pc, #176]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800392c:	4b27      	ldr	r3, [pc, #156]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003932:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	4924      	ldr	r1, [pc, #144]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800394a:	d105      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394c:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a1e      	ldr	r2, [pc, #120]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003956:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003972:	4916      	ldr	r1, [pc, #88]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a10      	ldr	r2, [pc, #64]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d019      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4908      	ldr	r1, [pc, #32]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039ba:	d109      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a02      	ldr	r2, [pc, #8]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039c6:	60d3      	str	r3, [r2, #12]
 80039c8:	e002      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039dc:	4b29      	ldr	r3, [pc, #164]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	4926      	ldr	r1, [pc, #152]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039fc:	4b21      	ldr	r3, [pc, #132]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a20      	ldr	r2, [pc, #128]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a22:	4918      	ldr	r1, [pc, #96]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a34:	4b13      	ldr	r3, [pc, #76]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a12      	ldr	r2, [pc, #72]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5a:	490a      	ldr	r1, [pc, #40]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e049      	b.n	8003b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe fabe 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f000 fe88 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d001      	beq.n	8003b50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e04c      	b.n	8003bea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	@ (8003bf8 <HAL_TIM_Base_Start+0xc0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a22      	ldr	r2, [pc, #136]	@ (8003bfc <HAL_TIM_Base_Start+0xc4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	@ (8003c00 <HAL_TIM_Base_Start+0xc8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1f      	ldr	r2, [pc, #124]	@ (8003c04 <HAL_TIM_Base_Start+0xcc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c08 <HAL_TIM_Base_Start+0xd0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	@ (8003c0c <HAL_TIM_Base_Start+0xd4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x70>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <HAL_TIM_Base_Start+0xd8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d115      	bne.n	8003bd4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <HAL_TIM_Base_Start+0xdc>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d015      	beq.n	8003be6 <HAL_TIM_Base_Start+0xae>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc0:	d011      	beq.n	8003be6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd2:	e008      	b.n	8003be6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40013400 	.word	0x40013400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40015000 	.word	0x40015000
 8003c14:	00010007 	.word	0x00010007

08003c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e049      	b.n	8003cbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f841 	bl	8003cc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fdc0 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x24>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e03c      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x3e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e02f      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e022      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d109      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x72>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e015      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x8c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e008      	b.n	8003d7a <HAL_TIM_PWM_Start+0x9e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0a6      	b.n	8003ed0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xb6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d90:	e023      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xc6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da0:	e01b      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xd6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003db0:	e013      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xe6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dc0:	e00b      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xf6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dd0:	e003      	b.n	8003dda <HAL_TIM_PWM_Start+0xfe>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 fb7e 	bl	80054e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3a      	ldr	r2, [pc, #232]	@ (8003ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <HAL_TIM_PWM_Start+0x148>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a39      	ldr	r2, [pc, #228]	@ (8003edc <HAL_TIM_PWM_Start+0x200>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <HAL_TIM_PWM_Start+0x148>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a37      	ldr	r2, [pc, #220]	@ (8003ee0 <HAL_TIM_PWM_Start+0x204>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_TIM_PWM_Start+0x148>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a36      	ldr	r2, [pc, #216]	@ (8003ee4 <HAL_TIM_PWM_Start+0x208>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIM_PWM_Start+0x148>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a34      	ldr	r2, [pc, #208]	@ (8003ee8 <HAL_TIM_PWM_Start+0x20c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIM_PWM_Start+0x148>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a33      	ldr	r2, [pc, #204]	@ (8003eec <HAL_TIM_PWM_Start+0x210>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d101      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x14c>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_TIM_PWM_Start+0x14e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a25      	ldr	r2, [pc, #148]	@ (8003ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d022      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e50:	d01d      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a26      	ldr	r2, [pc, #152]	@ (8003ef0 <HAL_TIM_PWM_Start+0x214>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a24      	ldr	r2, [pc, #144]	@ (8003ef4 <HAL_TIM_PWM_Start+0x218>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <HAL_TIM_PWM_Start+0x21c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a19      	ldr	r2, [pc, #100]	@ (8003edc <HAL_TIM_PWM_Start+0x200>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_TIM_PWM_Start+0x204>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x1b2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_TIM_PWM_Start+0x210>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d115      	bne.n	8003eba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <HAL_TIM_PWM_Start+0x220>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b06      	cmp	r3, #6
 8003e9e:	d015      	beq.n	8003ecc <HAL_TIM_PWM_Start+0x1f0>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea6:	d011      	beq.n	8003ecc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	e008      	b.n	8003ecc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e000      	b.n	8003ece <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40013400 	.word	0x40013400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800
 8003eec:	40015000 	.word	0x40015000
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	00010007 	.word	0x00010007

08003f00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e049      	b.n	8003fa6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f841 	bl	8003fae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 fc4c 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_IC_Start+0x1a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e023      	b.n	8004026 <HAL_TIM_IC_Start+0x62>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_IC_Start+0x2a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	e01b      	b.n	8004026 <HAL_TIM_IC_Start+0x62>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_IC_Start+0x3a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_IC_Start+0x62>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d104      	bne.n	800400e <HAL_TIM_IC_Start+0x4a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e00b      	b.n	8004026 <HAL_TIM_IC_Start+0x62>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d104      	bne.n	800401e <HAL_TIM_IC_Start+0x5a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e003      	b.n	8004026 <HAL_TIM_IC_Start+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004024:	b2db      	uxtb	r3, r3
 8004026:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_TIM_IC_Start+0x74>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e013      	b.n	8004060 <HAL_TIM_IC_Start+0x9c>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b04      	cmp	r3, #4
 800403c:	d104      	bne.n	8004048 <HAL_TIM_IC_Start+0x84>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e00b      	b.n	8004060 <HAL_TIM_IC_Start+0x9c>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d104      	bne.n	8004058 <HAL_TIM_IC_Start+0x94>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e003      	b.n	8004060 <HAL_TIM_IC_Start+0x9c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800405e:	b2db      	uxtb	r3, r3
 8004060:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d102      	bne.n	800406e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e097      	b.n	80041a2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_TIM_IC_Start+0xbe>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004080:	e023      	b.n	80040ca <HAL_TIM_IC_Start+0x106>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d104      	bne.n	8004092 <HAL_TIM_IC_Start+0xce>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004090:	e01b      	b.n	80040ca <HAL_TIM_IC_Start+0x106>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_IC_Start+0xde>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a0:	e013      	b.n	80040ca <HAL_TIM_IC_Start+0x106>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_IC_Start+0xee>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b0:	e00b      	b.n	80040ca <HAL_TIM_IC_Start+0x106>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_IC_Start+0xfe>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c0:	e003      	b.n	80040ca <HAL_TIM_IC_Start+0x106>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_TIM_IC_Start+0x116>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d8:	e013      	b.n	8004102 <HAL_TIM_IC_Start+0x13e>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d104      	bne.n	80040ea <HAL_TIM_IC_Start+0x126>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040e8:	e00b      	b.n	8004102 <HAL_TIM_IC_Start+0x13e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_IC_Start+0x136>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040f8:	e003      	b.n	8004102 <HAL_TIM_IC_Start+0x13e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2201      	movs	r2, #1
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f9ea 	bl	80054e4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a25      	ldr	r2, [pc, #148]	@ (80041ac <HAL_TIM_IC_Start+0x1e8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004122:	d01d      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a21      	ldr	r2, [pc, #132]	@ (80041b0 <HAL_TIM_IC_Start+0x1ec>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a20      	ldr	r2, [pc, #128]	@ (80041b4 <HAL_TIM_IC_Start+0x1f0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_TIM_IC_Start+0x1f4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <HAL_TIM_IC_Start+0x1f8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_TIM_IC_Start+0x1fc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_IC_Start+0x19c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1a      	ldr	r2, [pc, #104]	@ (80041c4 <HAL_TIM_IC_Start+0x200>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d115      	bne.n	800418c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <HAL_TIM_IC_Start+0x204>)
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d015      	beq.n	800419e <HAL_TIM_IC_Start+0x1da>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004178:	d011      	beq.n	800419e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	e008      	b.n	800419e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e000      	b.n	80041a0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40013400 	.word	0x40013400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40015000 	.word	0x40015000
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e088      	b.n	80042fc <HAL_TIM_IC_ConfigChannel+0x130>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004208:	f000 ffa6 	bl	8005158 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 020c 	bic.w	r2, r2, #12
 800421a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	619a      	str	r2, [r3, #24]
 800422e:	e060      	b.n	80042f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b04      	cmp	r3, #4
 8004234:	d11c      	bne.n	8004270 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004246:	f001 f82a 	bl	800529e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004258:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6999      	ldr	r1, [r3, #24]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
 800426e:	e040      	b.n	80042f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d11b      	bne.n	80042ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004286:	f001 f877 	bl	8005378 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 020c 	bic.w	r2, r2, #12
 8004298:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69d9      	ldr	r1, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
 80042ac:	e021      	b.n	80042f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d11c      	bne.n	80042ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042c4:	f001 f894 	bl	80053f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69d9      	ldr	r1, [r3, #28]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	61da      	str	r2, [r3, #28]
 80042ec:	e001      	b.n	80042f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e0ff      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b14      	cmp	r3, #20
 800432e:	f200 80f0 	bhi.w	8004512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004332:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004513 	.word	0x08004513
 8004340:	08004513 	.word	0x08004513
 8004344:	08004513 	.word	0x08004513
 8004348:	080043cd 	.word	0x080043cd
 800434c:	08004513 	.word	0x08004513
 8004350:	08004513 	.word	0x08004513
 8004354:	08004513 	.word	0x08004513
 8004358:	0800440f 	.word	0x0800440f
 800435c:	08004513 	.word	0x08004513
 8004360:	08004513 	.word	0x08004513
 8004364:	08004513 	.word	0x08004513
 8004368:	0800444f 	.word	0x0800444f
 800436c:	08004513 	.word	0x08004513
 8004370:	08004513 	.word	0x08004513
 8004374:	08004513 	.word	0x08004513
 8004378:	08004491 	.word	0x08004491
 800437c:	08004513 	.word	0x08004513
 8004380:	08004513 	.word	0x08004513
 8004384:	08004513 	.word	0x08004513
 8004388:	080044d1 	.word	0x080044d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fad6 	bl	8004944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	619a      	str	r2, [r3, #24]
      break;
 80043ca:	e0a5      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb50 	bl	8004a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]
      break;
 800440c:	e084      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fbc3 	bl	8004ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0208 	orr.w	r2, r2, #8
 8004428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0204 	bic.w	r2, r2, #4
 8004438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69d9      	ldr	r1, [r3, #28]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	61da      	str	r2, [r3, #28]
      break;
 800444c:	e064      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fc35 	bl	8004cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69d9      	ldr	r1, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	021a      	lsls	r2, r3, #8
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	61da      	str	r2, [r3, #28]
      break;
 800448e:	e043      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fca8 	bl	8004dec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0208 	orr.w	r2, r2, #8
 80044aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0204 	bic.w	r2, r2, #4
 80044ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80044ce:	e023      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fcf2 	bl	8004ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	021a      	lsls	r2, r3, #8
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004510:	e002      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
      break;
 8004516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e0f6      	b.n	8004736 <HAL_TIM_ConfigClockSource+0x20a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004566:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800456a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6f      	ldr	r2, [pc, #444]	@ (8004740 <HAL_TIM_ConfigClockSource+0x214>)
 8004582:	4293      	cmp	r3, r2
 8004584:	f000 80c1 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 8004588:	4a6d      	ldr	r2, [pc, #436]	@ (8004740 <HAL_TIM_ConfigClockSource+0x214>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f200 80c6 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 8004590:	4a6c      	ldr	r2, [pc, #432]	@ (8004744 <HAL_TIM_ConfigClockSource+0x218>)
 8004592:	4293      	cmp	r3, r2
 8004594:	f000 80b9 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 8004598:	4a6a      	ldr	r2, [pc, #424]	@ (8004744 <HAL_TIM_ConfigClockSource+0x218>)
 800459a:	4293      	cmp	r3, r2
 800459c:	f200 80be 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 80045a0:	4a69      	ldr	r2, [pc, #420]	@ (8004748 <HAL_TIM_ConfigClockSource+0x21c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	f000 80b1 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 80045a8:	4a67      	ldr	r2, [pc, #412]	@ (8004748 <HAL_TIM_ConfigClockSource+0x21c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	f200 80b6 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 80045b0:	4a66      	ldr	r2, [pc, #408]	@ (800474c <HAL_TIM_ConfigClockSource+0x220>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f000 80a9 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 80045b8:	4a64      	ldr	r2, [pc, #400]	@ (800474c <HAL_TIM_ConfigClockSource+0x220>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f200 80ae 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 80045c0:	4a63      	ldr	r2, [pc, #396]	@ (8004750 <HAL_TIM_ConfigClockSource+0x224>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	f000 80a1 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 80045c8:	4a61      	ldr	r2, [pc, #388]	@ (8004750 <HAL_TIM_ConfigClockSource+0x224>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	f200 80a6 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 80045d0:	4a60      	ldr	r2, [pc, #384]	@ (8004754 <HAL_TIM_ConfigClockSource+0x228>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	f000 8099 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 80045d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004754 <HAL_TIM_ConfigClockSource+0x228>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	f200 809e 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 80045e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80045e4:	f000 8091 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 80045e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80045ec:	f200 8096 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 80045f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f4:	f000 8089 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1de>
 80045f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045fc:	f200 808e 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004604:	d03e      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x158>
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800460a:	f200 8087 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004612:	f000 8086 	beq.w	8004722 <HAL_TIM_ConfigClockSource+0x1f6>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461a:	d87f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 800461c:	2b70      	cmp	r3, #112	@ 0x70
 800461e:	d01a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x12a>
 8004620:	2b70      	cmp	r3, #112	@ 0x70
 8004622:	d87b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 8004624:	2b60      	cmp	r3, #96	@ 0x60
 8004626:	d050      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x19e>
 8004628:	2b60      	cmp	r3, #96	@ 0x60
 800462a:	d877      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 800462c:	2b50      	cmp	r3, #80	@ 0x50
 800462e:	d03c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x17e>
 8004630:	2b50      	cmp	r3, #80	@ 0x50
 8004632:	d873      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 8004634:	2b40      	cmp	r3, #64	@ 0x40
 8004636:	d058      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x1be>
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d86f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 800463c:	2b30      	cmp	r3, #48	@ 0x30
 800463e:	d064      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1de>
 8004640:	2b30      	cmp	r3, #48	@ 0x30
 8004642:	d86b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d060      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1de>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d867      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1de>
 8004650:	2b10      	cmp	r3, #16
 8004652:	d05a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1de>
 8004654:	e062      	b.n	800471c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004666:	f000 ff1d 	bl	80054a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	609a      	str	r2, [r3, #8]
      break;
 8004682:	e04f      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004694:	f000 ff06 	bl	80054a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046a6:	609a      	str	r2, [r3, #8]
      break;
 80046a8:	e03c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fdc2 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2150      	movs	r1, #80	@ 0x50
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fed1 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 80046c8:	e02c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	461a      	mov	r2, r3
 80046d8:	f000 fe1e 	bl	8005318 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2160      	movs	r1, #96	@ 0x60
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fec1 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 80046e8:	e01c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fda2 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2140      	movs	r1, #64	@ 0x40
 8004702:	4618      	mov	r0, r3
 8004704:	f000 feb1 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004708:	e00c      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f000 fea8 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 800471a:	e003      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      break;
 8004720:	e000      	b.n	8004724 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	00100070 	.word	0x00100070
 8004744:	00100060 	.word	0x00100060
 8004748:	00100050 	.word	0x00100050
 800474c:	00100040 	.word	0x00100040
 8004750:	00100030 	.word	0x00100030
 8004754:	00100020 	.word	0x00100020

08004758 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIM_SlaveConfigSynchro+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e031      	b.n	80047d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fc08 	bl	8004f98 <TIM_SlaveTimer_SetConfig>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e018      	b.n	80047d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004920 <TIM_Base_SetConfig+0x144>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d017      	beq.n	8004824 <TIM_Base_SetConfig+0x48>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d013      	beq.n	8004824 <TIM_Base_SetConfig+0x48>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a49      	ldr	r2, [pc, #292]	@ (8004924 <TIM_Base_SetConfig+0x148>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x48>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a48      	ldr	r2, [pc, #288]	@ (8004928 <TIM_Base_SetConfig+0x14c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x48>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a47      	ldr	r2, [pc, #284]	@ (800492c <TIM_Base_SetConfig+0x150>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x48>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a46      	ldr	r2, [pc, #280]	@ (8004930 <TIM_Base_SetConfig+0x154>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x48>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a45      	ldr	r2, [pc, #276]	@ (8004934 <TIM_Base_SetConfig+0x158>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a39      	ldr	r2, [pc, #228]	@ (8004920 <TIM_Base_SetConfig+0x144>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d023      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004844:	d01f      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a36      	ldr	r2, [pc, #216]	@ (8004924 <TIM_Base_SetConfig+0x148>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01b      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a35      	ldr	r2, [pc, #212]	@ (8004928 <TIM_Base_SetConfig+0x14c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d017      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a34      	ldr	r2, [pc, #208]	@ (800492c <TIM_Base_SetConfig+0x150>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a33      	ldr	r2, [pc, #204]	@ (8004930 <TIM_Base_SetConfig+0x154>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00f      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a33      	ldr	r2, [pc, #204]	@ (8004938 <TIM_Base_SetConfig+0x15c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00b      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a32      	ldr	r2, [pc, #200]	@ (800493c <TIM_Base_SetConfig+0x160>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a31      	ldr	r2, [pc, #196]	@ (8004940 <TIM_Base_SetConfig+0x164>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <TIM_Base_SetConfig+0xaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2c      	ldr	r2, [pc, #176]	@ (8004934 <TIM_Base_SetConfig+0x158>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d108      	bne.n	8004898 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800488c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a18      	ldr	r2, [pc, #96]	@ (8004920 <TIM_Base_SetConfig+0x144>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <TIM_Base_SetConfig+0x110>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004930 <TIM_Base_SetConfig+0x154>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00f      	beq.n	80048ec <TIM_Base_SetConfig+0x110>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004938 <TIM_Base_SetConfig+0x15c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_Base_SetConfig+0x110>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a19      	ldr	r2, [pc, #100]	@ (800493c <TIM_Base_SetConfig+0x160>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_Base_SetConfig+0x110>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a18      	ldr	r2, [pc, #96]	@ (8004940 <TIM_Base_SetConfig+0x164>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0x110>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a13      	ldr	r2, [pc, #76]	@ (8004934 <TIM_Base_SetConfig+0x158>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d103      	bne.n	80048f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f023 0201 	bic.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]
  }
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40013400 	.word	0x40013400
 8004934:	40015000 	.word	0x40015000
 8004938:	40014000 	.word	0x40014000
 800493c:	40014400 	.word	0x40014400
 8004940:	40014800 	.word	0x40014800

08004944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f023 0201 	bic.w	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f023 0302 	bic.w	r3, r3, #2
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <TIM_OC1_SetConfig+0x11c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <TIM_OC1_SetConfig+0x88>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <TIM_OC1_SetConfig+0x120>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_OC1_SetConfig+0x88>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004a68 <TIM_OC1_SetConfig+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_OC1_SetConfig+0x88>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a6c <TIM_OC1_SetConfig+0x128>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_OC1_SetConfig+0x88>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <TIM_OC1_SetConfig+0x12c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC1_SetConfig+0x88>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a74 <TIM_OC1_SetConfig+0x130>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10c      	bne.n	80049e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0308 	bic.w	r3, r3, #8
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a60 <TIM_OC1_SetConfig+0x11c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <TIM_OC1_SetConfig+0xd2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <TIM_OC1_SetConfig+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_OC1_SetConfig+0xd2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a68 <TIM_OC1_SetConfig+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_OC1_SetConfig+0xd2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1a      	ldr	r2, [pc, #104]	@ (8004a6c <TIM_OC1_SetConfig+0x128>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_OC1_SetConfig+0xd2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <TIM_OC1_SetConfig+0x12c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC1_SetConfig+0xd2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a18      	ldr	r2, [pc, #96]	@ (8004a74 <TIM_OC1_SetConfig+0x130>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d111      	bne.n	8004a3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800
 8004a74:	40015000 	.word	0x40015000

08004a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f023 0210 	bic.w	r2, r3, #16
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0320 	bic.w	r3, r3, #32
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b88 <TIM_OC2_SetConfig+0x110>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_OC2_SetConfig+0x74>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a2b      	ldr	r2, [pc, #172]	@ (8004b8c <TIM_OC2_SetConfig+0x114>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC2_SetConfig+0x74>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b90 <TIM_OC2_SetConfig+0x118>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10d      	bne.n	8004b08 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <TIM_OC2_SetConfig+0x110>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <TIM_OC2_SetConfig+0xc0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	@ (8004b8c <TIM_OC2_SetConfig+0x114>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_OC2_SetConfig+0xc0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <TIM_OC2_SetConfig+0x11c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_OC2_SetConfig+0xc0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <TIM_OC2_SetConfig+0x120>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_OC2_SetConfig+0xc0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b9c <TIM_OC2_SetConfig+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC2_SetConfig+0xc0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <TIM_OC2_SetConfig+0x118>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d113      	bne.n	8004b60 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40013400 	.word	0x40013400
 8004b90:	40015000 	.word	0x40015000
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <TIM_OC3_SetConfig+0x10c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_OC3_SetConfig+0x72>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb0 <TIM_OC3_SetConfig+0x110>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC3_SetConfig+0x72>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a29      	ldr	r2, [pc, #164]	@ (8004cb4 <TIM_OC3_SetConfig+0x114>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10d      	bne.n	8004c2e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	@ (8004cac <TIM_OC3_SetConfig+0x10c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_OC3_SetConfig+0xbe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <TIM_OC3_SetConfig+0x110>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_OC3_SetConfig+0xbe>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <TIM_OC3_SetConfig+0x118>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_OC3_SetConfig+0xbe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <TIM_OC3_SetConfig+0x11c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_OC3_SetConfig+0xbe>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc0 <TIM_OC3_SetConfig+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_OC3_SetConfig+0xbe>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <TIM_OC3_SetConfig+0x114>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d113      	bne.n	8004c86 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40013400 	.word	0x40013400
 8004cb4:	40015000 	.word	0x40015000
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800

08004cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd4 <TIM_OC4_SetConfig+0x110>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_OC4_SetConfig+0x74>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd8 <TIM_OC4_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC4_SetConfig+0x74>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2a      	ldr	r2, [pc, #168]	@ (8004ddc <TIM_OC4_SetConfig+0x118>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10d      	bne.n	8004d54 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	031b      	lsls	r3, r3, #12
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd4 <TIM_OC4_SetConfig+0x110>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <TIM_OC4_SetConfig+0xc0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <TIM_OC4_SetConfig+0x114>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00f      	beq.n	8004d84 <TIM_OC4_SetConfig+0xc0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <TIM_OC4_SetConfig+0x11c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <TIM_OC4_SetConfig+0xc0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <TIM_OC4_SetConfig+0x120>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d007      	beq.n	8004d84 <TIM_OC4_SetConfig+0xc0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <TIM_OC4_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_OC4_SetConfig+0xc0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a17      	ldr	r2, [pc, #92]	@ (8004ddc <TIM_OC4_SetConfig+0x118>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d113      	bne.n	8004dac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	019b      	lsls	r3, r3, #6
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40015000 	.word	0x40015000
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800

08004dec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <TIM_OC5_SetConfig+0xbc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_OC5_SetConfig+0x82>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a18      	ldr	r2, [pc, #96]	@ (8004eac <TIM_OC5_SetConfig+0xc0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_OC5_SetConfig+0x82>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <TIM_OC5_SetConfig+0xc4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_OC5_SetConfig+0x82>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <TIM_OC5_SetConfig+0xc8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_OC5_SetConfig+0x82>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a15      	ldr	r2, [pc, #84]	@ (8004eb8 <TIM_OC5_SetConfig+0xcc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC5_SetConfig+0x82>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <TIM_OC5_SetConfig+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d109      	bne.n	8004e82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	621a      	str	r2, [r3, #32]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	40015000 	.word	0x40015000

08004ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	051b      	lsls	r3, r3, #20
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <TIM_OC6_SetConfig+0xc0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <TIM_OC6_SetConfig+0x84>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <TIM_OC6_SetConfig+0xc4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_OC6_SetConfig+0x84>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <TIM_OC6_SetConfig+0xc8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_OC6_SetConfig+0x84>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	@ (8004f8c <TIM_OC6_SetConfig+0xcc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_OC6_SetConfig+0x84>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a16      	ldr	r2, [pc, #88]	@ (8004f90 <TIM_OC6_SetConfig+0xd0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC6_SetConfig+0x84>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	@ (8004f94 <TIM_OC6_SetConfig+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800
 8004f94:	40015000 	.word	0x40015000

08004f98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4a56      	ldr	r2, [pc, #344]	@ (8005140 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f000 80a2 	beq.w	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 8004fee:	4a54      	ldr	r2, [pc, #336]	@ (8005140 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	f200 809b 	bhi.w	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8004ff6:	4a53      	ldr	r2, [pc, #332]	@ (8005144 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	f000 809a 	beq.w	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 8004ffe:	4a51      	ldr	r2, [pc, #324]	@ (8005144 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005000:	4293      	cmp	r3, r2
 8005002:	f200 8093 	bhi.w	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005006:	4a50      	ldr	r2, [pc, #320]	@ (8005148 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	f000 8092 	beq.w	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 800500e:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	f200 808b 	bhi.w	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005016:	4a4d      	ldr	r2, [pc, #308]	@ (800514c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	f000 808a 	beq.w	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 800501e:	4a4b      	ldr	r2, [pc, #300]	@ (800514c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	f200 8083 	bhi.w	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005026:	4a4a      	ldr	r2, [pc, #296]	@ (8005150 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	f000 8082 	beq.w	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 800502e:	4a48      	ldr	r2, [pc, #288]	@ (8005150 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d87b      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005034:	4a47      	ldr	r2, [pc, #284]	@ (8005154 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d07b      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 800503a:	4a46      	ldr	r2, [pc, #280]	@ (8005154 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d875      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005040:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005044:	d075      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 8005046:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800504a:	d86f      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 800504c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005050:	d06f      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d869      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005058:	2b70      	cmp	r3, #112	@ 0x70
 800505a:	d01a      	beq.n	8005092 <TIM_SlaveTimer_SetConfig+0xfa>
 800505c:	2b70      	cmp	r3, #112	@ 0x70
 800505e:	d865      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005060:	2b60      	cmp	r3, #96	@ 0x60
 8005062:	d059      	beq.n	8005118 <TIM_SlaveTimer_SetConfig+0x180>
 8005064:	2b60      	cmp	r3, #96	@ 0x60
 8005066:	d861      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005068:	2b50      	cmp	r3, #80	@ 0x50
 800506a:	d04b      	beq.n	8005104 <TIM_SlaveTimer_SetConfig+0x16c>
 800506c:	2b50      	cmp	r3, #80	@ 0x50
 800506e:	d85d      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005070:	2b40      	cmp	r3, #64	@ 0x40
 8005072:	d019      	beq.n	80050a8 <TIM_SlaveTimer_SetConfig+0x110>
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	d859      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005078:	2b30      	cmp	r3, #48	@ 0x30
 800507a:	d05a      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 800507c:	2b30      	cmp	r3, #48	@ 0x30
 800507e:	d855      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005080:	2b20      	cmp	r3, #32
 8005082:	d056      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 8005084:	2b20      	cmp	r3, #32
 8005086:	d851      	bhi.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d052      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 800508c:	2b10      	cmp	r3, #16
 800508e:	d050      	beq.n	8005132 <TIM_SlaveTimer_SetConfig+0x19a>
 8005090:	e04c      	b.n	800512c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80050a2:	f000 f9ff 	bl	80054a4 <TIM_ETR_SetConfig>
      break;
 80050a6:	e045      	b.n	8005134 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d004      	beq.n	80050ba <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80050b4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80050b8:	d101      	bne.n	80050be <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e03b      	b.n	8005136 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
      break;
 8005102:	e017      	b.n	8005134 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005110:	461a      	mov	r2, r3
 8005112:	f000 f895 	bl	8005240 <TIM_TI1_ConfigInputStage>
      break;
 8005116:	e00d      	b.n	8005134 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005124:	461a      	mov	r2, r3
 8005126:	f000 f8f7 	bl	8005318 <TIM_TI2_ConfigInputStage>
      break;
 800512a:	e003      	b.n	8005134 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
      break;
 8005130:	e000      	b.n	8005134 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005132:	bf00      	nop
  }

  return status;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	00100070 	.word	0x00100070
 8005144:	00100060 	.word	0x00100060
 8005148:	00100050 	.word	0x00100050
 800514c:	00100040 	.word	0x00100040
 8005150:	00100030 	.word	0x00100030
 8005154:	00100020 	.word	0x00100020

08005158 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f023 0201 	bic.w	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a28      	ldr	r2, [pc, #160]	@ (8005224 <TIM_TI1_SetConfig+0xcc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518c:	d017      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a25      	ldr	r2, [pc, #148]	@ (8005228 <TIM_TI1_SetConfig+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a24      	ldr	r2, [pc, #144]	@ (800522c <TIM_TI1_SetConfig+0xd4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a23      	ldr	r2, [pc, #140]	@ (8005230 <TIM_TI1_SetConfig+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <TIM_TI1_SetConfig+0xdc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <TIM_TI1_SetConfig+0xe0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_TI1_SetConfig+0x66>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a20      	ldr	r2, [pc, #128]	@ (800523c <TIM_TI1_SetConfig+0xe4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <TIM_TI1_SetConfig+0x6a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <TIM_TI1_SetConfig+0x6c>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e003      	b.n	80051e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 030a 	and.w	r3, r3, #10
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40015000 	.word	0x40015000

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0210 	bic.w	r2, r3, #16
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	031b      	lsls	r3, r3, #12
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f023 0210 	bic.w	r2, r3, #16
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	031b      	lsls	r3, r3, #12
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005354:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80053c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	031b      	lsls	r3, r3, #12
 8005434:	b29b      	uxth	r3, r3
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005442:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	031b      	lsls	r3, r3, #12
 8005448:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 0307 	orr.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2201      	movs	r2, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e074      	b.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a34      	ldr	r2, [pc, #208]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a33      	ldr	r2, [pc, #204]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a31      	ldr	r2, [pc, #196]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800558c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800559e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c8:	d01d      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a15      	ldr	r2, [pc, #84]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a18      	ldr	r2, [pc, #96]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a11      	ldr	r2, [pc, #68]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40013400 	.word	0x40013400
 8005648:	40015000 	.word	0x40015000
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40014000 	.word	0x40014000

0800565c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e078      	b.n	800576a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d009      	beq.n	800571e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d11c      	bne.n	8005758 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	051b      	lsls	r3, r3, #20
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40013400 	.word	0x40013400
 8005780:	40015000 	.word	0x40015000

08005784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e042      	b.n	800581c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fc fbe9 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2224      	movs	r2, #36	@ 0x24
 80057b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb24 	bl	8005e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f825 	bl	8005824 <UART_SetConfig>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e01b      	b.n	800581c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fba3 	bl	8005f60 <UART_CheckIdleState>
 800581a:	4603      	mov	r3, r0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005828:	b08c      	sub	sp, #48	@ 0x30
 800582a:	af00      	add	r7, sp, #0
 800582c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	431a      	orrs	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	431a      	orrs	r2, r3
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	4313      	orrs	r3, r2
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4baa      	ldr	r3, [pc, #680]	@ (8005afc <UART_SetConfig+0x2d8>)
 8005854:	4013      	ands	r3, r2
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585c:	430b      	orrs	r3, r1
 800585e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a9f      	ldr	r2, [pc, #636]	@ (8005b00 <UART_SetConfig+0x2dc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800588c:	4313      	orrs	r3, r2
 800588e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800589a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	f023 010f 	bic.w	r1, r3, #15
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a90      	ldr	r2, [pc, #576]	@ (8005b04 <UART_SetConfig+0x2e0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d125      	bne.n	8005914 <UART_SetConfig+0xf0>
 80058c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005b08 <UART_SetConfig+0x2e4>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d81a      	bhi.n	800590c <UART_SetConfig+0xe8>
 80058d6:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <UART_SetConfig+0xb8>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	080058ed 	.word	0x080058ed
 80058e0:	080058fd 	.word	0x080058fd
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	08005905 	.word	0x08005905
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e116      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e112      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005902:	e10e      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e10a      	b.n	8005b22 <UART_SetConfig+0x2fe>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005912:	e106      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a7c      	ldr	r2, [pc, #496]	@ (8005b0c <UART_SetConfig+0x2e8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d138      	bne.n	8005990 <UART_SetConfig+0x16c>
 800591e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b08 <UART_SetConfig+0x2e4>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d82d      	bhi.n	8005988 <UART_SetConfig+0x164>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0x110>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005969 	.word	0x08005969
 8005938:	08005989 	.word	0x08005989
 800593c:	08005989 	.word	0x08005989
 8005940:	08005989 	.word	0x08005989
 8005944:	08005979 	.word	0x08005979
 8005948:	08005989 	.word	0x08005989
 800594c:	08005989 	.word	0x08005989
 8005950:	08005989 	.word	0x08005989
 8005954:	08005971 	.word	0x08005971
 8005958:	08005989 	.word	0x08005989
 800595c:	08005989 	.word	0x08005989
 8005960:	08005989 	.word	0x08005989
 8005964:	08005981 	.word	0x08005981
 8005968:	2300      	movs	r3, #0
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596e:	e0d8      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005970:	2302      	movs	r3, #2
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005976:	e0d4      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597e:	e0d0      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005986:	e0cc      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e0c8      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5e      	ldr	r2, [pc, #376]	@ (8005b10 <UART_SetConfig+0x2ec>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d125      	bne.n	80059e6 <UART_SetConfig+0x1c2>
 800599a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b08 <UART_SetConfig+0x2e4>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059a4:	2b30      	cmp	r3, #48	@ 0x30
 80059a6:	d016      	beq.n	80059d6 <UART_SetConfig+0x1b2>
 80059a8:	2b30      	cmp	r3, #48	@ 0x30
 80059aa:	d818      	bhi.n	80059de <UART_SetConfig+0x1ba>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d00a      	beq.n	80059c6 <UART_SetConfig+0x1a2>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d814      	bhi.n	80059de <UART_SetConfig+0x1ba>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <UART_SetConfig+0x19a>
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d008      	beq.n	80059ce <UART_SetConfig+0x1aa>
 80059bc:	e00f      	b.n	80059de <UART_SetConfig+0x1ba>
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c4:	e0ad      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80059c6:	2302      	movs	r3, #2
 80059c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059cc:	e0a9      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80059ce:	2304      	movs	r3, #4
 80059d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d4:	e0a5      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80059d6:	2308      	movs	r3, #8
 80059d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059dc:	e0a1      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80059de:	2310      	movs	r3, #16
 80059e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e4:	e09d      	b.n	8005b22 <UART_SetConfig+0x2fe>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005b14 <UART_SetConfig+0x2f0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d125      	bne.n	8005a3c <UART_SetConfig+0x218>
 80059f0:	4b45      	ldr	r3, [pc, #276]	@ (8005b08 <UART_SetConfig+0x2e4>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80059fc:	d016      	beq.n	8005a2c <UART_SetConfig+0x208>
 80059fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a00:	d818      	bhi.n	8005a34 <UART_SetConfig+0x210>
 8005a02:	2b80      	cmp	r3, #128	@ 0x80
 8005a04:	d00a      	beq.n	8005a1c <UART_SetConfig+0x1f8>
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d814      	bhi.n	8005a34 <UART_SetConfig+0x210>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <UART_SetConfig+0x1f0>
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d008      	beq.n	8005a24 <UART_SetConfig+0x200>
 8005a12:	e00f      	b.n	8005a34 <UART_SetConfig+0x210>
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a1a:	e082      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a22:	e07e      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a24:	2304      	movs	r3, #4
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a2a:	e07a      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a32:	e076      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a34:	2310      	movs	r3, #16
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3a:	e072      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a35      	ldr	r2, [pc, #212]	@ (8005b18 <UART_SetConfig+0x2f4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d12a      	bne.n	8005a9c <UART_SetConfig+0x278>
 8005a46:	4b30      	ldr	r3, [pc, #192]	@ (8005b08 <UART_SetConfig+0x2e4>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a54:	d01a      	beq.n	8005a8c <UART_SetConfig+0x268>
 8005a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a5a:	d81b      	bhi.n	8005a94 <UART_SetConfig+0x270>
 8005a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a60:	d00c      	beq.n	8005a7c <UART_SetConfig+0x258>
 8005a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a66:	d815      	bhi.n	8005a94 <UART_SetConfig+0x270>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <UART_SetConfig+0x250>
 8005a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a70:	d008      	beq.n	8005a84 <UART_SetConfig+0x260>
 8005a72:	e00f      	b.n	8005a94 <UART_SetConfig+0x270>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a7a:	e052      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a82:	e04e      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a8a:	e04a      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a92:	e046      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9a:	e042      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <UART_SetConfig+0x2dc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d13a      	bne.n	8005b1c <UART_SetConfig+0x2f8>
 8005aa6:	4b18      	ldr	r3, [pc, #96]	@ (8005b08 <UART_SetConfig+0x2e4>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ab0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ab4:	d01a      	beq.n	8005aec <UART_SetConfig+0x2c8>
 8005ab6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aba:	d81b      	bhi.n	8005af4 <UART_SetConfig+0x2d0>
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac0:	d00c      	beq.n	8005adc <UART_SetConfig+0x2b8>
 8005ac2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac6:	d815      	bhi.n	8005af4 <UART_SetConfig+0x2d0>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <UART_SetConfig+0x2b0>
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad0:	d008      	beq.n	8005ae4 <UART_SetConfig+0x2c0>
 8005ad2:	e00f      	b.n	8005af4 <UART_SetConfig+0x2d0>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ada:	e022      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005adc:	2302      	movs	r3, #2
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae2:	e01e      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aea:	e01a      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af2:	e016      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afa:	e012      	b.n	8005b22 <UART_SetConfig+0x2fe>
 8005afc:	cfff69f3 	.word	0xcfff69f3
 8005b00:	40008000 	.word	0x40008000
 8005b04:	40013800 	.word	0x40013800
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40004400 	.word	0x40004400
 8005b10:	40004800 	.word	0x40004800
 8005b14:	40004c00 	.word	0x40004c00
 8005b18:	40005000 	.word	0x40005000
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4aae      	ldr	r2, [pc, #696]	@ (8005de0 <UART_SetConfig+0x5bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	f040 8097 	bne.w	8005c5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d823      	bhi.n	8005b7e <UART_SetConfig+0x35a>
 8005b36:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <UART_SetConfig+0x318>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b7f 	.word	0x08005b7f
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b7f 	.word	0x08005b7f
 8005b4c:	08005b6f 	.word	0x08005b6f
 8005b50:	08005b7f 	.word	0x08005b7f
 8005b54:	08005b7f 	.word	0x08005b7f
 8005b58:	08005b7f 	.word	0x08005b7f
 8005b5c:	08005b77 	.word	0x08005b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b60:	f7fd fcd2 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b66:	e010      	b.n	8005b8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b68:	4b9e      	ldr	r3, [pc, #632]	@ (8005de4 <UART_SetConfig+0x5c0>)
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b6c:	e00d      	b.n	8005b8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6e:	f7fd fc5d 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005b72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b74:	e009      	b.n	8005b8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b7c:	e005      	b.n	8005b8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8130 	beq.w	8005df2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	4a94      	ldr	r2, [pc, #592]	@ (8005de8 <UART_SetConfig+0x5c4>)
 8005b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d305      	bcc.n	8005bc2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d903      	bls.n	8005bca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bc8:	e113      	b.n	8005df2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	2200      	movs	r2, #0
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	60fa      	str	r2, [r7, #12]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	4a84      	ldr	r2, [pc, #528]	@ (8005de8 <UART_SetConfig+0x5c4>)
 8005bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2200      	movs	r2, #0
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bec:	f7fa ffda 	bl	8000ba4 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	020b      	lsls	r3, r1, #8
 8005c02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c06:	0202      	lsls	r2, r0, #8
 8005c08:	6979      	ldr	r1, [r7, #20]
 8005c0a:	6849      	ldr	r1, [r1, #4]
 8005c0c:	0849      	lsrs	r1, r1, #1
 8005c0e:	2000      	movs	r0, #0
 8005c10:	460c      	mov	r4, r1
 8005c12:	4605      	mov	r5, r0
 8005c14:	eb12 0804 	adds.w	r8, r2, r4
 8005c18:	eb43 0905 	adc.w	r9, r3, r5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	469a      	mov	sl, r3
 8005c24:	4693      	mov	fp, r2
 8005c26:	4652      	mov	r2, sl
 8005c28:	465b      	mov	r3, fp
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	f7fa ffb9 	bl	8000ba4 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4613      	mov	r3, r2
 8005c38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c40:	d308      	bcc.n	8005c54 <UART_SetConfig+0x430>
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c48:	d204      	bcs.n	8005c54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	e0ce      	b.n	8005df2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c5a:	e0ca      	b.n	8005df2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c64:	d166      	bne.n	8005d34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d827      	bhi.n	8005cbe <UART_SetConfig+0x49a>
 8005c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <UART_SetConfig+0x450>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	08005cbf 	.word	0x08005cbf
 8005c84:	08005caf 	.word	0x08005caf
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005cbf 	.word	0x08005cbf
 8005c90:	08005cbf 	.word	0x08005cbf
 8005c94:	08005cb7 	.word	0x08005cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c98:	f7fd fc36 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8005c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c9e:	e014      	b.n	8005cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca0:	f7fd fc48 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ca6:	e010      	b.n	8005cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8005de4 <UART_SetConfig+0x5c0>)
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cac:	e00d      	b.n	8005cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fd fbbd 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005cb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cb4:	e009      	b.n	8005cca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cbc:	e005      	b.n	8005cca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8090 	beq.w	8005df2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	4a44      	ldr	r2, [pc, #272]	@ (8005de8 <UART_SetConfig+0x5c4>)
 8005cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ce4:	005a      	lsls	r2, r3, #1
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	441a      	add	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	d916      	bls.n	8005d2c <UART_SetConfig+0x508>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d04:	d212      	bcs.n	8005d2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f023 030f 	bic.w	r3, r3, #15
 8005d0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	8bfb      	ldrh	r3, [r7, #30]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	8bfa      	ldrh	r2, [r7, #30]
 8005d28:	60da      	str	r2, [r3, #12]
 8005d2a:	e062      	b.n	8005df2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d32:	e05e      	b.n	8005df2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d828      	bhi.n	8005d8e <UART_SetConfig+0x56a>
 8005d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <UART_SetConfig+0x520>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d8f 	.word	0x08005d8f
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d8f 	.word	0x08005d8f
 8005d60:	08005d8f 	.word	0x08005d8f
 8005d64:	08005d87 	.word	0x08005d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7fd fbce 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8005d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d6e:	e014      	b.n	8005d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d70:	f7fd fbe0 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8005d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d76:	e010      	b.n	8005d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d78:	4b1a      	ldr	r3, [pc, #104]	@ (8005de4 <UART_SetConfig+0x5c0>)
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d7c:	e00d      	b.n	8005d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fd fb55 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8005d82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d98:	bf00      	nop
    }

    if (pclk != 0U)
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d028      	beq.n	8005df2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	4a10      	ldr	r2, [pc, #64]	@ (8005de8 <UART_SetConfig+0x5c4>)
 8005da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	441a      	add	r2, r3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b0f      	cmp	r3, #15
 8005dc8:	d910      	bls.n	8005dec <UART_SetConfig+0x5c8>
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d20c      	bcs.n	8005dec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	e009      	b.n	8005df2 <UART_SetConfig+0x5ce>
 8005dde:	bf00      	nop
 8005de0:	40008000 	.word	0x40008000
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	080064e8 	.word	0x080064e8
      }
      else
      {
        ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2200      	movs	r2, #0
 8005e06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e0e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3730      	adds	r7, #48	@ 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f1a:	d10a      	bne.n	8005f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b098      	sub	sp, #96	@ 0x60
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f70:	f7fc fa80 	bl	8002474 <HAL_GetTick>
 8005f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d12f      	bne.n	8005fe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f88e 	bl	80060b4 <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d022      	beq.n	8005fe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e063      	b.n	80060ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d149      	bne.n	8006086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f857 	bl	80060b4 <UART_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d03c      	beq.n	8006086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	623b      	str	r3, [r7, #32]
   return(result);
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602a:	633b      	str	r3, [r7, #48]	@ 0x30
 800602c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e6      	bne.n	800600c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3308      	adds	r3, #8
 8006044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	60fb      	str	r3, [r7, #12]
   return(result);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800605e:	61fa      	str	r2, [r7, #28]
 8006060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	617b      	str	r3, [r7, #20]
   return(result);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e5      	bne.n	800603e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e012      	b.n	80060ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3758      	adds	r7, #88	@ 0x58
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c4:	e04f      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d04b      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fc f9d1 	bl	8002474 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e04e      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d037      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b80      	cmp	r3, #128	@ 0x80
 80060fa:	d034      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d031      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b08      	cmp	r3, #8
 800610e:	d110      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2208      	movs	r2, #8
 8006116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f838 	bl	800618e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2208      	movs	r2, #8
 8006122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e029      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006140:	d111      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800614a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f81e 	bl	800618e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e00f      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	429a      	cmp	r2, r3
 8006182:	d0a0      	beq.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800618e:	b480      	push	{r7}
 8006190:	b095      	sub	sp, #84	@ 0x54
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e3      	bne.n	80061c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d118      	bne.n	800623a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	60bb      	str	r3, [r7, #8]
   return(result);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f023 0310 	bic.w	r3, r3, #16
 800621c:	647b      	str	r3, [r7, #68]	@ 0x44
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	613b      	str	r3, [r7, #16]
   return(result);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e6      	bne.n	8006208 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800624e:	bf00      	nop
 8006250:	3754      	adds	r7, #84	@ 0x54
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UARTEx_DisableFifoMode+0x16>
 800626c:	2302      	movs	r3, #2
 800626e:	e027      	b.n	80062c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	@ 0x24
 800627c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800629e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e02d      	b.n	8006340 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	@ 0x24
 80062f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f84f 	bl	80063c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e02d      	b.n	80063bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	@ 0x24
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f811 	bl	80063c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d108      	bne.n	80063e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063e4:	e031      	b.n	800644a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063e6:	2308      	movs	r3, #8
 80063e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ea:	2308      	movs	r3, #8
 80063ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	0e5b      	lsrs	r3, r3, #25
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0f5b      	lsrs	r3, r3, #29
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	7b3a      	ldrb	r2, [r7, #12]
 8006412:	4911      	ldr	r1, [pc, #68]	@ (8006458 <UARTEx_SetNbDataToProcess+0x94>)
 8006414:	5c8a      	ldrb	r2, [r1, r2]
 8006416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800641a:	7b3a      	ldrb	r2, [r7, #12]
 800641c:	490f      	ldr	r1, [pc, #60]	@ (800645c <UARTEx_SetNbDataToProcess+0x98>)
 800641e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006420:	fb93 f3f2 	sdiv	r3, r3, r2
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	7b7a      	ldrb	r2, [r7, #13]
 8006430:	4909      	ldr	r1, [pc, #36]	@ (8006458 <UARTEx_SetNbDataToProcess+0x94>)
 8006432:	5c8a      	ldrb	r2, [r1, r2]
 8006434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006438:	7b7a      	ldrb	r2, [r7, #13]
 800643a:	4908      	ldr	r1, [pc, #32]	@ (800645c <UARTEx_SetNbDataToProcess+0x98>)
 800643c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	08006500 	.word	0x08006500
 800645c:	08006508 	.word	0x08006508

08006460 <memset>:
 8006460:	4402      	add	r2, r0
 8006462:	4603      	mov	r3, r0
 8006464:	4293      	cmp	r3, r2
 8006466:	d100      	bne.n	800646a <memset+0xa>
 8006468:	4770      	bx	lr
 800646a:	f803 1b01 	strb.w	r1, [r3], #1
 800646e:	e7f9      	b.n	8006464 <memset+0x4>

08006470 <__libc_init_array>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	4d0d      	ldr	r5, [pc, #52]	@ (80064a8 <__libc_init_array+0x38>)
 8006474:	4c0d      	ldr	r4, [pc, #52]	@ (80064ac <__libc_init_array+0x3c>)
 8006476:	1b64      	subs	r4, r4, r5
 8006478:	10a4      	asrs	r4, r4, #2
 800647a:	2600      	movs	r6, #0
 800647c:	42a6      	cmp	r6, r4
 800647e:	d109      	bne.n	8006494 <__libc_init_array+0x24>
 8006480:	4d0b      	ldr	r5, [pc, #44]	@ (80064b0 <__libc_init_array+0x40>)
 8006482:	4c0c      	ldr	r4, [pc, #48]	@ (80064b4 <__libc_init_array+0x44>)
 8006484:	f000 f818 	bl	80064b8 <_init>
 8006488:	1b64      	subs	r4, r4, r5
 800648a:	10a4      	asrs	r4, r4, #2
 800648c:	2600      	movs	r6, #0
 800648e:	42a6      	cmp	r6, r4
 8006490:	d105      	bne.n	800649e <__libc_init_array+0x2e>
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	f855 3b04 	ldr.w	r3, [r5], #4
 8006498:	4798      	blx	r3
 800649a:	3601      	adds	r6, #1
 800649c:	e7ee      	b.n	800647c <__libc_init_array+0xc>
 800649e:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a2:	4798      	blx	r3
 80064a4:	3601      	adds	r6, #1
 80064a6:	e7f2      	b.n	800648e <__libc_init_array+0x1e>
 80064a8:	08006518 	.word	0x08006518
 80064ac:	08006518 	.word	0x08006518
 80064b0:	08006518 	.word	0x08006518
 80064b4:	0800651c 	.word	0x0800651c

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
